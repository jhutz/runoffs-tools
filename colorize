#!/usr/bin/perl
# feed me the 'cfCheck' TSV format, with at least these columns:
# Class, No., Name, Member #, Color, Runoffs Color

use Text::CSV;

if (@ARGV) {
  print STDERR "Usage: colorize < data > patch\n";
  exit 1;
}

my @StdColors = (qw(Aqua Black Blue Brown Cream Gold Gray Green), 'Lt Blue',
  qw(Magenta Maroon Orange Pewter Pink Purple),
  qw(Red Silver Teal Turquoise Violet White Yellow));
my %Order = map(($StdColors[$_] => 1+$_), 0..$#StdColors);
my %ColorMap = (map((lc($_) => $_), @StdColors),
  blac  => 'Black',
  blk   => 'Black',
  blu   => 'Blue',
  brg   => 'Green',
  grey  => 'Gray',
  navy  => 'Blue',
  oran  => 'Orange',
  org   => 'Orange',
  orng  => 'Orange',
  orang => 'Orange',
  slvr  => 'Silver',
  siler => 'Silver',
  wh    => 'White',
  wht   => 'White',
  whit  => 'White',
  yel   => 'Yellow',
  yello => 'Yellow',
  yellw => 'Yellow',
  carbon => 'Black',

  stripe  => undef,
  plaid   => undef,
  camo    => undef,
  various => undef,

  'diamond black'       => 'Black',
  'satin black'         => 'Black',
  'lemans blue'         => 'Blue',
  'light blue'          => 'Blue',
  'lt blue'             => 'Blue',
  'dark blue'           => 'Blue',
  'midnight blue'       => 'Blue',
  'dark gray'           => 'Gray',
  'dark grey'           => 'Gray',
  'granite grey'        => 'Gray',
  'lime green'          => 'Green',
  'dark green'          => 'Green',
  'metallic green'      => 'Green',
  'candy red'           => 'Red',
  'garnet'              => 'Red',
  'ruby red'            => 'Red',
  'neon red'            => 'Red',
  'scarlet red'         => 'Red',
  'sheetz red'          => 'Red',
  'neon yell'           => 'Yellow',
);

my $IN = Text::CSV->new( {
    sep_char => "\t", quote_char => undef, escape_char => undef, binary => 1,
  });
$IN->column_names($IN->getline(\*STDIN));

my $OUT = new Text::CSV( { binary => 1, eol => "\n" });
$OUT->print(\*STDOUT, [qw[key field old new]]);


LINE: while ($hr = $IN->getline_hr(\*STDIN)) {
  next if $$hr{'Runoffs Color'} ne '';
  my @words = split(/\s+(?:and|on|-)\s+|[\s\/\\,&]+/,
    lc($$hr{'Color'} =~ s/\.//gr));
  my @newcols;
  my $class = $$hr{'Class'};

  $class =~ s/^(bs|bspec|b-spec)$/B-Spec/i;

  while (@words) {
    my $color = shift @words;
    if (exists($ColorMap{$color})) {
      push(@newcols, $ColorMap{$color}) if $ColorMap{$color};
      next;
    }
    $color .= " $words[0]";
    if (exists($ColorMap{$color})) {
      push(@newcols, $ColorMap{$color}) if $ColorMap{$color};
      shift @words;
      next;
    }
    printf STDERR ("%-6s %3s %-9s %-30s %s\n",
      $class, @$hr{'No.','Member #','Name','Color'});
    next LINE;
  }
  if (!@newcols) {
    printf STDERR ("%-6s %3s %-9s %-30s %s\n",
      $class, @$hr{'No.','Member #','Name','Color'});
    next LINE;
  }

  $OUT->print(\*STDOUT, [
    join('_', $class, $$hr{'Member #'}), 'Color', '',
    join('/', sort { $Order{$a} <=> $Order{$b} } @newcols),
    $$hr{'Color'}
  ]);
}
