#!/usr/bin/env python3

import os
import sys
import itertools
import datetime
from dateutil import parser as dateutil_parser
import re
import argparse
import configparser
import pprint
import requests

# These command-line options can be set in the config file
opts_from_config = ('server', 'userid', 'password', 'pwfile',
            'org-id', 'event-id', 'segment-id')

# Default values for some options.
# Only needed for options that appear in opts_from_config
opts_defaults = { 'server' : 'api.motorsportreg.com' }

# Required options for anything that connects to MSR
opts_msr_reqd = ('server', 'userid', 'password', 'org-id' )

msr_attendee_params = { 'fields' : 'questions' }
msr_assign_params = { 'fields' : 'vehicle_questions' }

def load_config():
    """Load the config file, if any, and provide default values for options."""

    global Config
    Config = {}
    if Options.config is None:
        if 'HOME' in os.environ:
            def_cfg = os.path.join(os.environ['HOME'], '.msrmon')
        else:
            def_cfg = '.msrmon'
        if os.path.exists(def_cfg):
            Options.config = def_cfg
    if Options.config is not None:
        cp = configparser.ConfigParser()
        with open(Options.config) as lines:
            cp.read_file(itertools.chain(("[top]",), lines))
        Config = cp['top']

    for key in opts_from_config:
        okey = key.replace('-','_')
        if key in Config and getattr(Options, okey, None) is None:
            setattr(Options, okey, Config[key])
    for key in opts_defaults.keys():
        if getattr(Options, key, None) is None:
            setattr(Options, key, opts_defaults[key])
    if Options.password is None and Options.pwfile is not None:
        with open(Options.pwfile) as pwfile:
            Options.password = pwfile.readline()

def parse_ts(timestr):
    if re.match('^[0-9]+$', timestr):
        return datetime.fromtimestamp(int(timestr))
    else:
        return dateutil_parser.parse(timestr)


def msr_session():
    global MSR
    if 'MSR' not in globals():
        MSR = requests.Session()
        MSR.auth = (Options.userid, Options.password)
        MSR.headers.update({ 'X-Organization-Id' : Options.org_id })
    return MSR

def msr_get(query, params={}):
    sess = msr_session()
    r = sess.get('https://%s/rest/%s.json' % (Options.server, query), params = params)
    r.raise_for_status()
    return r.json()

def msr_get_attendee(item):
    j = msr_get('events/%s/attendees/%s' % (Options.event_id, item),
            params = msr_attendee_params)
    try: obj = j['response']['attendees'][0]
    except IndexError: return None
    # XXX simplify event questions
    return obj

def msr_get_attendee_list():
    j = msr_get('events/%s/attendees' % Options.event_id,
            params = msr_attendee_params)
    # XXX simplify event questions
    return j['response']['attendees']

def msr_get_assign(item):
    j = msr_get('events/%s/assignments/%s' % (Options.event_id, item),
            msr_assign_params)
    try: obj = j['response']['assignments'][0]
    except IndexError: return None
    # XXX simplify vehicle questions
    return obj

def msr_get_assign_list():
    j = msr_get('events/%s/segments/%s/assignments' %
            (Options.event_id, Options.segment_id),
            msr_assign_params)
    # XXX simplify vehicle questions
    return j['response']['assignments']

def do_list_events():
    j = msr_get('calendars/organization/%s' % Options.org_id,
            params = { 'archive' : 'true' } if Options.archive else {})
    if Options.debug: pprint.pprint(j, file=sys.stderr)
    print('%-35s  %s' % ('Event ID', 'Name'))
    for event in j['response']['events']:
        print('%-35s  %s' % (event['id'], event['name']))

def do_list_segments():
    j = msr_get('events/%s/segments' % Options.event_id)
    if Options.debug: pprint.pprint(j, file=sys.stderr)
    print('%-35s  %s' % ('Segment ID', 'Name'))
    for seg in j['response']['segments']:
        print('%-35s  %s' % (seg['id'], seg['name']))
        if Options.verbose:
            class_map = { x['id'] : x['shortName'] for x in seg['classes'] }
            for grp in sorted(seg['groups'], key=lambda x: x['shortName']):
                classes = [ class_map[x['classId']]
                        for x in seg['classToGroupMaps'] if x['groupId'] == grp['id'] ]
                if len(classes) > 0:
                    print('    ', grp['shortName'], '('+', '.join(sorted(classes))+')')
                else:
                    print('    ', grp['shortName'])

def do_dump_attendees():
    if Options.items is not None and len(Options.items) > 0:
        for item in Options.items:
            pprint.pprint(msr_get_attendee(item))
    else:
        pprint.pprint(msr_get_attendee_list())

def do_dump_assigns():
    if Options.items is not None and len(Options.items) > 0:
        for item in Options.items:
            pprint.pprint(msr_get_assign(item))
    else:
        pprint.pprint(msr_get_assign_list())

def do_dump_changes():
    if Options.items is not None and len(Options.items) > 0:
        for item in Options.items:
            j = msr_get('events/%s/feeds/timing/%s' % (Options.event_id, item))
            pprint.pprint(j['data'])
    else:
        params = { 'segments' : Options.segment_id }
        if Options.since is not None:
            params['since'] = Options.since.strftime('%Y-%m-%d %H:%M:%S.%f')
        j = msr_get('events/%s/feeds/timing' % Options.event_id, params=params)
        pprint.pprint(j)

def do_help(ap):
    if (Options.subcommand is not None):
        ap.parse_args([Options.subcommand, '--help'])
    else:
        ap.print_help()
    ap.exit()


def process_args():
    global Options
    ap = argparse.ArgumentParser(usage='%(prog)s [options] command [args...]')
    sp = ap.add_subparsers(title='subcommands', metavar=None)
    ap._optionals.title = 'Options'
    
    ap.add_argument('-d', '--debug', action='store_true',
            help='Enable debugging')
    ap.add_argument('-v', '--verbose', action='store_true',
            help='Enable verbose output')
    ap.add_argument('-c', '--config',     help='Config file')
    ap.add_argument('--server', help='MotorsportReg API server')
    ap.add_argument('-U', '--userid',     help='MotorsportReg username')
    ap.add_argument('-P', '--password',   help='MotorsportReg password')
    ap.add_argument(      '--pwfile',     help='File containing MotorsportReg password')
    ap.add_argument('-O', '--org-id',     help='Organization ID')
    ap.add_argument('-E', '--event-id',   help='Event ID')
    ap.add_argument('-S', '--segment-id', help='Segment ID')

    p = sp.add_parser('help', help='Show help message or subcommand help')
    p.add_argument('subcommand', nargs='?', help='Subcommand to show help for')
    p.set_defaults(_func = do_help)
    p.set_defaults(_args = (ap,))

    p = sp.add_parser('list_events', help='List available events from MSR')
    p.add_argument('--archive', action='store_true', help='Show old events')
    p.set_defaults(_func = do_list_events)
    p.set_defaults(_required = opts_msr_reqd)

    p = sp.add_parser('list_segments', help='List event segments')
    p.set_defaults(_func = do_list_segments)
    p.set_defaults(_required = opts_msr_reqd + ('event-id',))

    p = sp.add_parser('dump_attendees', help='Dump raw attendee data')
    p.add_argument('items', nargs=argparse.REMAINDER, help='Attendee IDs to dump')
    p.set_defaults(_func = do_dump_attendees)
    p.set_defaults(_required = opts_msr_reqd + ('event-id',))

    p = sp.add_parser('dump_assigns', help='Dump raw assignment data')
    p.add_argument('items', nargs=argparse.REMAINDER, help='Assignment IDs to dump')
    p.set_defaults(_func = do_dump_assigns)
    p.set_defaults(_required = opts_msr_reqd + ('event-id',))

    p = sp.add_parser('dump_changes', help='Dump raw change data')
    p.add_argument('-t', '--since', type=parse_ts, help='Start time')
    p.add_argument('items', nargs=argparse.REMAINDER, help='Change IDs to dump')
    p.set_defaults(_func = do_dump_changes)
    p.set_defaults(_required = opts_msr_reqd + ('event-id','segment-id'))

    Options = ap.parse_args()
    if not hasattr(Options, '_func'):
        ap.error('Missing subcommand')
    load_config()

    required = set(getattr(Options, '_required', ()))
    missing = [ x for x in required if getattr(Options, x.replace('-', '_'), None) is None ]
    if len(missing) > 0:
        for x in missing: sys.stderr.write("--%s is required\n" % x)
        ap.print_usage(file=sys.stderr)
        ap.exit(status=2)

    Options._func(*getattr(Options, '_args', ()))

process_args()
