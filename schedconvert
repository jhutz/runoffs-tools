#!/usr/bin/perl

use Getopt::Std;
use IO::File;
use POSIX ();
use Time::Local;
use strict;

our %Opts;
our $Practice   = undef; # Date of all practice sessions
our %ClassGroup = ();  # Map class name to its run group
our %ClassQuals = ();  # Map class name to list of qualifying dates
our %ClassRaces = ();  # Map class name to race date
our %GroupQuals = ();  # Map qual group name to list of qualifying dates
our %GroupRaces = ();  # Map race group name to race date
our %RaceGroups = ();  # Map qual group name to race group names
our %OrbitsGroups = (); # Map Orbits group name to qual groups
our $QualTime;
our $RaceTime;
our $RaceLaps;

our $QualTimeAM = 15;
our $QualTimePM;

our %Categories = (
  'AS/GT1/GT2/GT3/P2/T1'  => [qw[AS GT1 GT2 GT3 P2 T1]],
  'B-Spec/STL/T4'         => [qw[B-Spec STL T4]],
  'EP/FP/HP/FF'           => [qw[EP FF FP HP]],
  'F5/GTL'                => [qw[F5 GTL]],
  'FA/FC/T2'              => [qw[FA FC T2]],
  'FB/STU'                => [qw[FB STU]],
  'FE/FM/P1'              => [qw[FE FM P1]],
  'SRF/T3'                => [qw[SRF T3]],
  # Single-class groups: FV SM SRF3
);
our %ClassCategory = ();
foreach my $cat (keys %Categories) {
  map($ClassCategory{$_} = $cat, @{$Categories{$cat}});
}

our %Notes = (
  'FC' => 'All engines Ford',
  'FE' => 'All engines Mazda',
  'FV' => 'All engines Volkswagen',
  'S2' => 'All engines Ford',
);

our $re_day = qr{(?i:mon|tue|wed|thu(?:rs)?|fri|sat|sun)\s+(\d+)/(\d+)};

sub unix2excel ($) {
  my($unix) = @_;

  # Don't change empty values
  return $unix if $unix eq '';

  # UNIX counts seconds, with 0 being 1-Jan-1970 UTC
  # Excel counts days, with 1 being 1-Jan-1900 Local time

  # Before we do anything else, we have to translate to use a local
  # time epoch, rather than the UTC epoch all sane-thinking people use.
  my $local = timegm(localtime($unix));
  
  # Now.  2208988800 is the number of seconds between the two epoch dates.
  # Then we have to add a day to account for Excel calling its epoch "1".
  # And we have to add another day to work around Excel's bug-for-bug
  # compatibility with Lotus 1-2-3, which incorrectly treated 1900 as
  # being a leap year.
  return ($local + 2208988800 + 86400 + 86400) / 86400;
}

getopts('2hs:x:z:Q:R:', \%Opts);
if ($Opts{'h'}) {
  print <<'EOF';
usage: schedconvert [opts] < input
       schedconvert -h

  -h        Print help message
  -2        Emit "seamless" sessions as two Orbits runs
  -s PATH   Output CSV schedule table in PATH (default schedule.csv)
  -x PATH   Output Orbits XML run data in PATH (default schedule.xml)
  -z ZONE   Interpret schedule data in ZONE (default local timezone)
  -Q days   set # days qualifying
  -R days   set # days racing
EOF
  exit 0;
}
$Opts{'s'} ||= 'schedule.csv';
$Opts{'x'} ||= 'schedule.xml';
if (exists($Opts{'z'})) {
  $ENV{TZ} = $Opts{'z'};
  POSIX::tzset();
}


$QualTime = $QualTimeAM if defined $QualTimeAM;

# Process the input
{
  my $mode = 'Q';
  my $year = (localtime(time))[5] + 1900;
  my @days = ();
  my $lasthhmm = undef;
  my @all_lines = <>;
  while (@all_lines) {
    $_ = shift(@all_lines);
    s#\s*([,/]+)\s*#$1#g;
    if (/^\s*NATIONAL CHAMPIONSHIP RACES/i) {
      $mode = 'R';
      @days = ();
    }
    if (/\b(\d+)\s+LAPS?\b/) {
      $RaceLaps = $1 if $mode eq 'R' && !defined($RaceLaps);
    }
    if (/\b(\d+)\s+MIN\b/) {
      $QualTime = $1 if $mode eq 'Q' && !defined($QualTime);
      $RaceTime = $1 if $mode eq 'R' && !defined($RaceTime);
    }

    # Look to see if we're starting a new set of days
    # There is a day/date at the top of each column.
    my @newdays = ();
    while (s/^(\s*)$re_day//) {
      push(@newdays, [$2, $3, length($1)]);
    }
    if (!@days && @newdays > 1) {
      # Kludge: we may know how many days of qualifying and/or racing there are
      if ($mode eq 'Q' && $Opts{'Q'} > 0) {
        splice(@newdays, $Opts{'Q'});
      } elsif ($mode eq 'R' && $Opts{'R'} > 0) {
        splice(@newdays, $Opts{'R'});
      }
      @days = @newdays;
      #if (!defined($Practice)) {
      #  $Practice = timelocal(0,0,0, $days[0][1]-1, $days[0][0]-1, $year);
      #}
      $lasthhmm = undef;
      next;
    }

    # Switch to PM qualifying time after lunch
    if ($mode eq 'Q' && defined $QualTimePM && /^\s*(\d+:\d+)\s*lunch/i) {
        $QualTime = $QualTimePM;
    }


    # OK; look for something resembling a schedule row
    if (defined($lasthhmm) && !/^\s*(\d+):(\d+)/) {
      $_ = "$lasthhmm $_";
    }
    $lasthhmm = undef;

    next unless @days && s/^(\s*(\d+):(\d+))//;
    my ($prefix, $hh, $mm) = ($1, $2, $3);

    # If there's another timestamp in the middle of the row,
    # chop it off and process it as a separate line after this one.
    if (s/(\s+)(\d+:\d+)(\s+.*)//) {
      unshift(@all_lines, $2 . ' ' x length($prefix.$`) . $1 . $3);
    }

    # Kludge!  Skip not-real "sessions" and garbage times that
    # appear in the events column to the right of the schedule.
    next if /^\s*(anthem|lunch|dinner|[ap]m\b)/i;

    # Kludge!  "Friday Night Lights" are not race sessions :-)
    s/\s+Friday.*//;

    # Split the rest of the row into group columns.
    # We have to do this by hand because there might be blank
    # columns, which we detect by noticing that the amount of
    # whitespace before a column is at least 2x the amount of
    # space that appeared before that column's day header.
    #
    # This lets us handle schedules like the 2015 Runoffs,
    # which has Tuesday qualifying starting one session later
    # in the morning and running one session later in the evening.
    #
    #my @groups = split;
    my @groups = ();
    while (s/^(\s*)(\S+)//) {
      my($s, $g) = ($1, $2);
      while (@days > @groups && length($s) >= 2*$days[@groups][2]) {
        $s = substr($s, $days[@groups][2]);
        push(@groups, undef);
      }
      push(@groups, $g);
    }
    #print STDERR ">>", join(' ', map("[$_]", @groups)), "\n";

    $hh += 12 if $hh < 8;
    if (@groups > @days) { splice(@groups,scalar(@days)) }
    if (@groups < @days) { warn "WARNING:$.: not enough columns at $hh:$mm\n" }

    # Kludge: This row has a valid time and a bunch of empty space
    # where the groups should be.  Perhaps there is a slight misalignment
    # in the PDF, and the data is on the next row.
    if (!grep(defined($_), @groups)) {
      $lasthhmm = "$hh:$mm";
      next;
    }

    foreach my $i (0 .. @groups-1) {
      my $when = timelocal(0, $mm, $hh, $days[$i][1], $days[$i][0]-1, $year);
      my $duration = ($mode eq 'Q') ? $QualTime : $RaceTime;
      my $one_duration = $duration;
      my $group = $groups[$i];
      #printf STDERR ("[%s] %d\n", $group, defined($group));
      next unless defined $group;

      my(@classes, @sets);
      foreach (split(m#//#, $group)) {
        # Kludge!  Fix up class names
        my @cc = split(m#[/,]+#, $_);
        map(s/\*$//, @cc);
        map(s/^(bs|bspec|b-spec)$/B-Spec/i, @cc);
        map(s/^(f5|f500)$/F5/i, @cc);
        push(@classes, @cc);
        push(@sets, join('/', sort @cc));
      }
      $group = join(' // ', @sets);

      if ($mode eq 'Q') {
        $duration *= @sets if @sets > 1 && !$Opts{'2'};

        $GroupQuals{$group} ||= [];
        $GroupQuals{$group}[$i] = [ $when, $duration ];
        foreach my $set (@sets) {
          foreach my $class (split(m#/#, $set)) {
            $ClassCategory{$class} = $class unless exists $ClassCategory{$class};
            if (!exists($ClassGroup{$class})) {
              $ClassGroup{$class} = $group;
            } elsif ($ClassGroup{$class} ne $group) {
              warn "WARNING:$.: Class $class is in multiple qualifying groups!\n";
            }
            if ($ClassCategory{$class} ne $ClassCategory{$classes[0]}) {
              warn ("WARNING:$.: Classes $classes[0] and $class "
                ."qualify together but are in different categories\n");
            }
            $ClassQuals{$class} ||= [];
            $ClassQuals{$class}[$i] = $when;
          }
          $when += $one_duration * 60;
        }
        $OrbitsGroups{$ClassCategory{$classes[0]}}{$group} = 1;

      } elsif ($mode eq 'R') {
        my $qgroup = $ClassGroup{$classes[0]};
        $RaceGroups{$qgroup} ||= [];
        push(@{$RaceGroups{$qgroup}}, $group);
        $GroupRaces{$group} = $when;
        foreach my $class (@classes) {
          $ClassRaces{$class} = $when;
          if (!exists($ClassGroup{$class})) {
            warn "WARNING:$.: Class $class not in any qualifying group!\n";
          } elsif (exists $ClassGroup{$classes[0]}
            && $ClassGroup{$classes[0]} ne $ClassGroup{$class}) {
            warn ("WARNING:$.: Classes $classes[0] and $class "
              ."race together but do not qualify together\n");
          }
        }

      } else {
        die "Unknown mode $mode";
      }
    }
  }
}

if (defined($Practice)) {
    printf("%-10s%02d/%02d ALL DAY\n", 'PRACTICE',
	(localtime($Practice))[4] + 1, (localtime($Practice))[3]);
}

# Reproduce the qualifying schedule
{
  my %times;
  my %dates;
  my %hours;
  foreach my $c (keys %ClassQuals) {
    #print STDERR "$c:";
    foreach (@{$ClassQuals{$c}}) {
      #print STDERR " <$_>", defined($_);
      next unless defined $_;
      $times{$_}++
    }
    #print STDERR "\n";
  }

  foreach (keys %times) {
    my($ss, $mm, $hh, $DD, $MM, $YY) = localtime($_);
    my $date = sprintf("%02d/%02d", $MM+1, $DD);
    my $hour = sprintf("%02d:%02d", $hh, $mm);
    $dates{$date}++;
    $hours{$hour}{$date} = $_;
  }

  print "\nQUALIFYING SCHEDULE:\n";
  print map("          $_", sort keys %dates), "\n";
  foreach my $hour (sort keys %hours) {
    my $text = "$hour     ";
    foreach my $date (sort keys %dates) {
      if (!defined($hours{$hour}{$date})) {
        $text .= ' ' x 15;
        next;
      }
      my($group) = grep(grep($$_[0] eq $hours{$hour}{$date},
          @{$GroupQuals{$_}}), keys %GroupQuals);
      #$group =~ s#//# // #;
      $text .= sprintf("%-15s", $group);
    }
    $text =~ s/\s*$/\n/;
    print $text;
  }
}

# Reproduce the race schedule
{
  my %times;
  my %dates;
  my %hours;
  $times{$_}++ foreach (values %ClassRaces);

  foreach (keys %times) {
    my($ss, $mm, $hh, $DD, $MM, $YY) = localtime($_);
    my $date = sprintf("%02d/%02d", $MM+1, $DD);
    my $hour = sprintf("%02d:%02d", $hh, $mm);
    $dates{$date}++;
    $hours{$hour}{$date} = $_;
  }

  print "\nRACE SCHEDULE:\n";
  print map("          $_", sort keys %dates), "\n";
  foreach my $hour (sort keys %hours) {
    my $text = "$hour     ";
    foreach my $date (sort keys %dates) {
      $text .= sprintf("%-15s",
        join('/', sort grep($ClassRaces{$_} eq $hours{$hour}{$date},
            keys %ClassRaces)));
      }
    $text =~ s/\s*$/\n/;
    print $text;
  }
}


# Produce a schedule for the results spreadsheet
{
  my $F = new IO::File($Opts{'s'}, O_WRONLY|O_CREAT|O_TRUNC, 0666)
    or die "$Opts{'s'}: $!\n";
  foreach my $class (sort keys %ClassGroup) {
    my @times = @{$ClassQuals{$class}};
    push(@times, $ClassRaces{$class});
    push(@times, $Practice) if defined $Practice;
    print $F join(',', $class, map(unix2excel($_), @times),
      $Notes{$class}), "\r\n";
  }
  my %groups = map(($_ => 1), grep(m#/#, keys %GroupQuals, keys %GroupRaces));
  foreach my $group (sort keys %groups) {
    my @classes = split(m#[/\s]+#, $group);
    my @times = @{$ClassQuals{$classes[0]}};
    push(@times, $GroupRaces{$group});
    push(@times, $Practice) if defined $Practice;
    print $F join(',', qq/"$group"/, map(unix2excel($_), @times), ''), "\r\n";
  }
  $F->close;
}


# Produce something we can give to Orbits
# Everything is done based on qualifying groups
# If you aren't in a qualifying group, you get no runs!
{
  my $F = new IO::File($Opts{'x'}, O_WRONLY|O_CREAT|O_TRUNC, 0666)
    or die "$Opts{'x'}: $!\n";
  print $F qq{<groups>\n};
  foreach my $ogroup (sort keys %OrbitsGroups) {
    # Emit the group
    print $F qq{  <group name="$ogroup">\n};
    print $F qq{    <competitors/>\n};
    print $F qq{    <runs>\n};

    foreach my $qgroup (sort keys %{$OrbitsGroups{$ogroup}}) {
      my @qgnames;
      if ($Opts{'2'}) {
        @qgnames = split(m#\s+//\s+#, $qgroup);
      } else {
        @qgnames = ($qgroup);
      }

      # Emit the qualifying sessions for the group
      foreach my $i (0 .. @{$GroupQuals{$qgroup}}-1) {
        my($when, $duration) = @{$GroupQuals{$qgroup}[$i]};
        foreach my $qgname (@qgnames) {
          my($ss,$mm,$hh,$DD,$MM,$YY) = localtime($when);
          printf $F (<<"EOF",
      <run name="%s" shortname="%s"
           date="%04d-%02d-%02d" time="%02d:%02d:%02d" type="qualify"
           startmethod="flag" countfirst="none" qualificationtype="none"
           autofinishmethod="time" autofinishtime="%02d:%02d:00">
EOF
            "$qgname Qual " . ($i+1), "Qual " . ($i+1),
            $YY+1900, $MM+1, $DD, $hh, $mm, 0,
            $duration / 60, $duration % 60);
          print $F qq{        <competitors/>\n};
          print $F qq{      </run>\n};
          $when += $duration * 60;
        }
      }

      # Emit the race sessions for all race groups in this group
      if (exists($RaceGroups{$qgroup})) {
        foreach my $rgroup (sort @{$RaceGroups{$qgroup}}) {
          my($ss,$mm,$hh,$DD,$MM,$YY) = localtime($GroupRaces{$rgroup});
          printf $F (<<"EOF",
      <run name="%s" shortname="%s"
           date="%04d-%02d-%02d" time="%02d:%02d:%02d" type="race"
           startmethod="firstpassing" countfirst="none"
           autofinishmethod="timeorlaps"
           autofinishtime="%02d:%02d:00" autofinishlaps="%d">
EOF
            "$rgroup Race", "Race",
            $YY+1900, $MM+1, $DD, $hh, $mm, 0,
            $RaceTime / 60, $RaceTime % 60, $RaceLaps);
          print $F qq{        <competitors/>\n};
          print $F qq{      </run>\n};
        }
      }
    }
    print $F qq{    </runs>\n};
    print $F qq{  </group>\n};
  }
  print $F qq{</groups>\n};
  $F->close;
}
