#!/usr/bin/perl

use Archive::Zip qw(:ERROR_CODES :CONSTANTS);
use Data::Dumper;
use DBI;
use DirHandle;
use File::Basename;
use Getopt::Std;
use HTML::Parser;
use IO::File;
use IO::Pipe;
use LWP;
use POSIX qw(strftime);
use URI::Escape;
use Text::CSV;
use Text::Wrap;

use strict;
use vars qw(%LOGO $CKPath %ClassKey %Session @CSVFields $LIST);
use vars qw($DEBUG $VERBOSE $GETONLY $MONITOR $REPORT $UPDATE $FORCE);
use vars qw($DBPath $DB $Template $Printer $CSVOut $SERVER $USERID $PASSWD);
use vars qw($URLBase $LoginURL $ListURL $GetURL $UA %FormInputs);

$LOGO{logo_dir} = "$ENV{HOME}/runoffs/Images";

$SERVER   = 'racecontrol.scca.com';
$USERID   = 'tandsusr1';
$DBPath   = "$ENV{HOME}/runoffs/Results/actions.db";
$CKPath   = "$ENV{HOME}/runoffs/Results/sessions.tsv";
$Template = join('', <DATA>);

# Need session type/date,
@CSVFields = qw(act_number act_datetime act_type act_initiated_by
  ses_type ses_planned_start
  protestee protesteeCar protesteeClass protestor protestorCar protestorClass
  act_gcr_section act_tech_penalty act_description
  act_accepted_flag act_cs_acked_flag act_delete_flag act_hold_results_flag
  _last_update
  );

$Text::Wrap::unexpand = 0;


sub usage  {
  print STDERR @_, "\n" if @_;
  print <<"EOF";
Usage: actionmon [-dvx] [-H host] [-U user] [-P pass] [-D dbpath] [-p printer] [-E export]
                 [-rm] [file]
       actionmon [-dvx] [-H host] [-U user] [-P pass] [-D dbpath] [-p printer] [-E export]
                 [-au] [-f] act_no...
       actionmon -h
  -d  Debug
  -h  This help message
  -x  Fetch data file only
  -v  Verbose action list

  -l  List actions in database
  -a  Show/print specified actions
  -r  Print a summary report
  -m  Continually monitor the action system
  -u  Update specified actions...
      with -x, fetch action detail file(s) only
      with -f, force replace/reprint of existing action

  -H  action system server host
  -U  action system userid
  -P  action system password
  -C  class key list [$CKPath]
  -D  database file [$DBPath]
  -p  Print to specified printer
  -E  Export CSV (tab-separated) to named path

EOF
  exit !!@_;
}

sub parse_args () {
  my %opts;

  getopts('adfhlmruvxp:C:D:E:H:U:P:', \%opts) or usage("Invalid option!");
  usage()    if $opts{h};
  $DEBUG++   if $opts{d};
  $VERBOSE++ if $opts{v};
  $GETONLY++ if $opts{x};
  $REPORT++  if $opts{r};
  $MONITOR++ if $opts{m};
  $UPDATE++  if $opts{u};
  $LIST++    if $opts{l};
  $LIST = 2  if $opts{a};
  $FORCE++   if $opts{f};

  $CKPath   = $opts{C} if defined $opts{C};
  $DBPath   = $opts{D} if defined $opts{D};
  $Printer  = $opts{p} if defined $opts{p};
  $CSVOut   = $opts{E} if defined $opts{E};
  $SERVER   = $opts{H} if defined $opts{H};
  $USERID   = $opts{U} if defined $opts{U};
  $PASSWD   = $opts{P} if defined $opts{P};

  $URLBase  = "https://$SERVER/";
  $LoginURL = $URLBase . 'Login.aspx';
  $ListURL  = $URLBase . 'Actions.aspx';
  $GetURL   = $URLBase . 'GetAction.aspx?ActionNum=';

  my $pwpath = "$ENV{HOME}/.runoffs_pw";
  if (!$PASSWD && -f $pwpath) {
    my $F = new IO::File($pwpath, O_RDONLY) or die "$pwpath: $!\n";
    while (<$F>) {
      chomp;
      my @F = split;
      $PASSWD = $F[1] if $F[0] eq 'action';
    }
    $F->close;
  }
}


sub db_open () {
  $DB = DBI->connect("dbi:SQLite:dbname=$DBPath", '', '',
    { RaiseError => 1, AutoCommit => 1 });
  $DB->do('create table if not exists action_data (
    aid integer not null,
    field text not null,
    value text,
    primary key (aid,field)
    )');
}

sub db_action_exists ($) {
  my($aid) = @_;
  my $count = $DB->selectrow_array(
    'select count(*) from action_data where aid = ?', {}, $aid);
  return $count;
}

sub db_store_action ($$) {
  my($aid, $a) = @_;

  $DB->do('delete from action_data where aid = ?', {}, $aid);
  my $S = $DB->prepare('insert into action_data (aid, field, value)
    values (?,?,?)');
  while (my($k, $v) = each(%$a)) {
    $S->execute($aid, $k, $v);
  }
}

sub db_fetch_action ($) {
  my($aid) = @_;

  return { map(@$_, @{
    $DB->selectall_arrayref(
    'select field,value from action_data where aid=?', {}, $aid) }) };
}

sub db_list_actions () {
  return $DB->selectcol_arrayref('select distinct aid from action_data');
}

sub db_export_csv () {
  my $F = IO::File->new("$CSVOut.NEW", O_RDWR|O_CREAT|O_TRUNC, 0644)
    or die "$CSVOut.NEW: $!\n";
  my $C = Text::CSV->new({
    binary => 1, eol => "\r\n",
    quote_space => 0,
    quote_binary => 0,
    sep_char => "\t",
    });
  $C->column_names(@CSVFields);
  $C->print($F, [ @CSVFields ]);
  foreach my $aid (sort { $a <=> $b } @{ db_list_actions() // [] }) {
    my $a = db_fetch_action($aid);
    my $s = $Session{lc($$a{act_cls_key})};
    $$a{$_} //= $$s{$_} foreach (keys %$s);
    $C->print_hr($F, $a);
  }
  $F->close;
  rename("$CSVOut.NEW", $CSVOut) or die "$CSVOut: $!\n";
}


sub process_form ($) {
  my($text) = @_;

  %FormInputs = ();
  my $P = new HTML::Parser(start_h => [ sub {
        my($attrs) = @_;
        $FormInputs{$$attrs{name}} = $$attrs{value};
    }, "attr"]);

  $P->parse($text);
}


sub submit_form ($) {
  my($url) = @_;

  my $req = new HTTP::Request(POST => $url);
  $req->content_type('application/x-www-form-urlencoded');
  $req->content(join('&',
      map($_ . '=' . uri_escape($FormInputs{$_}), keys %FormInputs)));
  my $res = $UA->request($req);
  die $res->status_line . "\n" unless $res->is_success;
  $res->content;
}


sub parse_action ($;$) {
  my($text, $update) = @_;
  my(@actions, $action, $sfield, $field, $ftext);

  if (defined($update)) {
    @actions = ($action = $update);
  }

  my $P = new HTML::Parser(
    start_h => [ sub {
        my($tag, $attrs) = @_;

        if (!defined($update) && $tag eq 'tr' &&
          ($$attrs{class} eq 'rgRow' || $$attrs{class} eq 'rgAltRow')) {
          my $rownum = $$attrs{id};
          $rownum =~ s/.*_//;
          $action = {
            _rownum => $rownum,
          };
          unshift(@actions, $action);
          print STDERR "tr $rownum\n" if $DEBUG;

        } elsif ($tag eq 'span' && $$attrs{id} =~ /RadGrid.*_ctl\d+_/) {
          $field = $';
          $field =~ s/^EditFormControl_//;
          $field =~ s/Label$//;
          $field =~ s/_displayonly$//;
          $ftext = undef;
          print STDERR "span $field\n" if $DEBUG;

        } elsif ($tag eq 'span' && $update) {
          $field = $$attrs{id};
          $ftext = undef;
          print STDERR "span -\n" if $DEBUG;

        } elsif ($tag eq 'select' && $$attrs{id} =~ /RadGrid.*_ctl\d+_/) {
          $sfield = $';
          $sfield =~ s/^EditFormControl_//;
          $sfield =~ s/Label$//;
          $sfield =~ s/_displayonly$//;
          if ($sfield eq 'act_cls_key') { $sfield = '_session' }
          print STDERR "select $sfield\n" if $DEBUG;

        } elsif ($tag eq 'option' && defined $sfield && $$attrs{selected}) {
          $field = $sfield;
          $ftext = undef;

        } elsif ($tag eq 'br') {
          $ftext .= "\n";
        }
      }, "tagname,attr" ],
    end_h => [ sub {
        my($tag) = @_;
        $ftext =~ s/^\s*//;
        $ftext =~ s/\s*$//;
        if (($tag eq 'span' || $tag eq 'option') && defined($field)) {
          if ($ftext ne '' || $$action{$field} eq '') {
            $$action{$field} = $ftext;
          }
          print STDERR "field $field = [$ftext]\n" if $DEBUG;

        } elsif ($tag eq 'td' && defined($action)
          && !exists($$action{_act_key})) {
          $$action{_act_key} = $ftext;
          print STDERR "_act_key $ftext\n" if $DEBUG;

        } elsif ($tag eq 'td' && defined($action)
          && !exists($$action{_cls_key})) {
          $$action{_cls_key} = $ftext;
          print STDERR "_cls_key $ftext\n" if $DEBUG;

        } elsif ($tag eq 'select') {
          $sfield = undef;
        }

        if ($tag ne 'br') {
          $field = undef;
          $ftext = undef;
        }
      }, "tagname" ],
    text_h => [ sub { $ftext .= $_[0] }, "dtext" ],
  );

  $P->parse($text);
  @actions;
}


sub get_action_detail ($$$) {
  my($aid, $rownum, $cls_key) = @_;

  my $req = new HTTP::Request(GET => $GetURL . $aid);
  my $res = $UA->request($req);
  die $res->status_line . "\n" unless $res->is_success;
  return $res->content;
}

sub action_summary($;$) {
  my($a, $extra) = @_;

  my $text = sprintf("#%3d %-5s %8s %-7s %-15s",
    $$a{act_number}, $$a{_date}, $$a{_time}, $$a{act_type},
    $extra ? $$a{_entries_brief} :
    ($$a{_entries_summary} || $$a{_entries_brief}));
  $text .= " $$a{_session}  $$a{act_tech_penalty}" if $extra;
  $text =~ s/\s*$//;
  return $text . "\n"
}

sub action_report($) {
  my($a) = @_;

  return action_summary($a) . "  $$a{_short_desc}\n";
}

sub action_detail($) {
  my($a) = @_;

  my $report = sprintf("  CS:%-3s   SOM:%-3s   COA:%-3s   HOLD:%-3s   REMOVE:%s\n",
    $$a{CsAcked}, $$a{SomComplete}, $$a{CoaComplete}, $$a{HoldResults},
    $$a{act_delete_flag} ? "YES" : "NO");

  $report .= "  $$a{_session}\n";
  $report .= "  $$a{act_tech_penalty}\n" if $$a{act_tech_penalty};
  $report .= "  per $$a{_auth} ($$a{act_gcr_section})\n";
  $report =~ s/per  \(/\(/;
  $report =~ s/\n\s+\(\)\n\Z/\n/;
  return $report;
}

sub print_report ($$) {
  my($template, $fields) = @_;

  my %fields = (%$fields, %LOGO);
  $template =~ s/\@(\w+)\@/$fields{$1}/g;
  if ($Printer eq '-') {
    print $template;
  } else {
    my $P = new IO::Pipe;
    $P->writer('lp', "-d$Printer") or die "lp: $!\n";
    print $P $template;
    $P->close;
  }
}


sub process_actions ($) {
  my($text) = @_;
  my(@actions, $report, $summary, $mreport, $count);

  my $start = strftime("%b %d %H:%M", localtime(time));

  process_form($text);
  @actions = parse_action($text);

  foreach my $a (@actions) {
    my $aid = $$a{act_number};
    my $stamp = strftime("%b %d %H:%M", localtime(time));
    my $existing = db_action_exists($aid) && db_fetch_action($aid);

    if ($UPDATE) {
      #print "$aid / ", join(' ', @ARGV), "\n";
      next unless grep($aid == $_, @ARGV);
    }

    # This will get overwritten with a longer form in the detail page
    $$a{_short_desc} = $$a{act_description};

    my $atext = get_action_detail($aid, $$a{_rownum}, $$a{_cls_key});
    if ($GETONLY) {
      print $atext;
      next;
    }
    parse_action($atext, $a);
    $$a{_last_update} = time;

    $$a{_session} = $ClassKey{lc($$a{act_cls_key})} if $$a{_session} eq '';
    my $s = $Session{lc($$a{act_cls_key})};
    $$a{$_} //= $$s{$_} foreach (keys %$s);

    ($$a{_date}, $$a{_time}) = split(' ', $$a{act_datetime});
    if    ($$a{act_type} eq 'CSA')     { $$a{_auth} = 'Chief Steward' }
    elsif ($$a{act_type} eq 'RFA')     { $$a{_auth} = 'SOM'           }
    elsif ($$a{act_type} eq 'Protest') { $$a{_auth} = 'SOM'           }
    else                               { $$a{_auth} = $$a{act_type}   }

    # The distinction between protestor and protestee is meaningless to us
    # because only the former is normally filled in except on a protest
    # and because on a protest or appeal, either one could be affected.
    # Further, either of these fields may contain multiple entries!
    # So for our purpose, consolidate into lists of cars, classes, and
    # drivers.

    my @cars    = (split(m{\n}m, $$a{protestorCar}),
                   split(m{\n}m, $$a{protesteeCar}));
    my @classes = (split(m{\n}m, $$a{protestorClass}),
                   split(m{\n}m, $$a{protesteeClass}));
    my @drivers = (split(m{\n}m, $$a{protestor}),
                   split(m{\n}m, $$a{protestee}));
    my @entries = map([ $cars[$_], $classes[$_], $drivers[$_] ], 0.. $#cars);
    #$$a{_entries_split} = [ @entries ];
    #$$a{_entries_full}  = [ map("#$$_[0] $$_[1] $$_[2]", @entries) ];
    my @_entries_full  = map("#$$_[0] $$_[1] $$_[2]", @entries);
    $$a{_entries_brief} = join(', ', map("#$$_[0] $$_[1]", @entries));
    $$a{_entries_summary} = @entries > 1 ? $$a{_entries_brief} : $_entries_full[0];

    if ($existing && !$FORCE) {
      if ( !grep(!/^_/ && !exists($$a{$_}), keys %$existing)
        && !grep(!/^_/ && !exists($$existing{$_}), keys %$a)
        && !grep(!/^_/ && $$a{$_} ne $$existing{$_}, keys %$a)) {
        # No change; move along
        print "$stamp UNCHANGED $aid\n" if $MONITOR && $VERBOSE;
        next;
      }
    }

    if (@entries) {
      foreach (@_entries_full) {
        $$a{__entries__} .= "() ($_) Field newline\n";
      }
      $$a{__entries__} =~ s/^\(\)/(Car(s))/;
    } else {
      $$a{__entries__} = "(Car(s)) ((none listed)) Field newline\n";
    }

    my $desc = wrap('', '', $$a{act_description});
    $desc =~ s/\n*$//;
    foreach (split(/\n/, $desc)) {
      $$a{__details__} .= "() ($_) Field newline\n";
    }
    $$a{__details__} =~ s/^\(\)/(Details)/;

    $report = action_report($a);

    if (!$UPDATE && (
        $$a{act_number} eq '' || !$$a{act_datetime} ||
        !$$a{acs_name} || $$a{acs_name} eq 'New' ||
        !$$a{act_type} || #$$a{act_type} eq 'NEW' ||
        !$$a{act_initiated_by} || !@entries)) {
      $report .= "  NOT READY\n";
      $mreport .= "$stamp $report";
      print $report if $VERBOSE;
      next;
    }

    $summary .= $report;
    $mreport .= "$stamp $report";
    print $report if $VERBOSE;
    $count++;

    $report = action_detail($a);
    $summary .= $report;
    print $report if $VERBOSE;

    $summary .= "\n";
    print "\n" if $VERBOSE;

    if ($DEBUG) {
      print STDERR "Action $aid:\n";
      print STDERR map(sprintf("  %-20s  %s\n", "$_:", $$a{$_}), sort keys %$a);
      print STDERR "\n";
    }

    db_store_action($aid, $a);
    print_report($Template, $a) if $Printer && ($FORCE || !$existing);
  }

  db_export_csv() if $CSVOut && $count;

  if ($MONITOR) {
    my $done = strftime("%b %d %H:%M", localtime(time));
    print $mreport unless $VERBOSE;
    printf "%s -> %s %d actions\n", $start, $done, $count;
  }
  if ($REPORT && $Printer && $summary) {
    # Print a summary report
    if ($Printer eq '-') {
      print ' ' x 25, "*** ACTION SUMMARY REPORT ***\n";
      print $summary;
    } else {
      my $P = new IO::Pipe;
      $P->writer('lp', "-d$Printer") or die "lp: $!\n";
      print $P ' ' x 25, "*** ACTION SUMMARY REPORT ***\n";
      print $P $summary;
      $P->close;
    }
  }
}

sub list_actions () {
  my(@list);

  if (@ARGV) {
    @list = sort { $a <=> $b } (@ARGV);
  } else {
    my $list = db_list_actions();
    return unless $list;
    @list = sort { $a <=> $b } (@$list);
  }

  foreach my $a (map(db_fetch_action($_), @list)) {
    print action_summary($a, !$VERBOSE);
    print action_detail($a), "\n" if $VERBOSE;
  }
}


sub print_actions () {
  die "Please list action(s) to print\n" unless @ARGV;
  my @list = sort { $a <=> $b } (@ARGV);

  foreach my $a (map(db_fetch_action($_), @list)) {
    if ($Printer) {
      print_report($Template, $a);
    } else {
      print action_summary($a, 0);
      print action_detail($a), "\n";
    }
  }
}


sub get_data () {
  my $req = new HTTP::Request(GET => $ListURL);
  my $res = $UA->request($req);
  die $res->status_line . "\n" unless $res->is_success;
  my $text = $res->content;

  if ($text =~ /type="password"/) {
    process_form($res->content);
    foreach (grep(/userid/i,   keys %FormInputs)) { $FormInputs{$_} = $USERID }
    foreach (grep(/password/i, keys %FormInputs)) { $FormInputs{$_} = $PASSWD }
    $text = submit_form($LoginURL);
  }

  return $text;
}

parse_args;

{
  my $F = new IO::File($CKPath, O_RDONLY) or die "$CKPath: $!\n";
  my $head = <$F>;
  my $C = new Text::CSV( { binary => 1,
      ($head =~ /\t/) ? (
        sep_char    => "\t",
        quote_char  => ($head =~ /"/ ? '"' : undef),
        escape_char => undef,
      ) : ()
    });
  $C->parse($head) or die "failed parsing data column headers\n";
  $C->column_names($C->fields());
  print STDERR "Loading class keys...\n" if $DEBUG;
  while (my $hr = $C->getline_hr($F)) {
    print STDERR Dumper($hr) if $DEBUG;
    $Session{lc($$hr{cls_key})} = $hr;
    $ClassKey{lc($$hr{cls_key})} = $$hr{fullName};
  }
  print STDERR Dumper(\%ClassKey) if $DEBUG;
  $F->close;
}

LOAD_LOGO: {
  if (defined($LOGO{logo_path})) {
    ($LOGO{logo_file} = $LOGO{logo_path}) =~ s#.*/##;
  } elsif (!defined(my $D = DirHandle->new($LOGO{logo_dir}))) {
    warn "$LOGO{logo_dir}: $!\n";
    last LOAD_LOGO;
  } else {
    while (defined($_ = $D->read)) {
      next unless /\.eps$/;
      if (defined($LOGO{logo_file})) {
        warn "Multiple .eps files found in $LOGO{logo_dir}; ignoring\n";
        last LOAD_LOGO;
      }
      $LOGO{logo_file} = $_;
    }
    $D->close;
    if (!defined($LOGO{logo_file})) {
      warn "No .eps files found in $LOGO{logo_dir}\n";
      last LOAD_LOGO;
    }
    $LOGO{logo_path} = "$LOGO{logo_dir}/$LOGO{logo_file}";
  }

  if (defined(my $F = new IO::File($LOGO{logo_path}, O_RDONLY))) {
    $F->read($LOGO{logo_data}, ($F->stat())[7]);
  } else {
    warn "$LOGO{logo_path}: $!\n";
    last LOAD_LOGO;
  }
  if (substr($LOGO{logo_data}, 0, 4) eq "\xC5\xD0\xD3\xC6") {
    # DOS EPS binary
    my($ps_off, $ps_len) = unpack('xxxxVV', $LOGO{logo_data});
    $LOGO{logo_data} = substr($LOGO{logo_data}, $ps_off, $ps_len);
  }
  if ($LOGO{logo_data} !~ /^\%\%BoundingBox:\s*(.*)/m) {
    warn "No bounding box found in $LOGO{logo_path}\n";
    %LOGO = ();
    last LOAD_LOGO;
  }

  ($LOGO{logo_bbox} = $1) =~ s/\s*$//;
  my($x, $y, $w, $h) = split(' ', $LOGO{logo_bbox});
  my $xscale = 100.0 / ($w - $x);
  my $yscale = 100.0 / ($h - $y);
  $LOGO{logo_scale} = sprintf("%.03f", ($xscale < $yscale) ? $xscale : $yscale);
}

## Fetch the data file
$UA = new LWP::UserAgent;
$UA->cookie_jar( {} );
push @{ $UA->requests_redirectable }, 'POST';
$UA->show_progress(1) if $DEBUG;

db_open();
if ($UPDATE) {
  process_actions(get_data());
} elsif ($LIST > 1) {
  print_actions();
} elsif ($LIST) {
  db_export_csv() if $CSVOut;
  list_actions();
} elsif ($GETONLY) {
  print get_data();
} elsif (@ARGV) {
  process_actions(join('', <>));
} elsif ($MONITOR) {
  while (1) {
    process_actions(get_data());
    print "\n";
    sleep(30);
  }
} else {
  process_actions(get_data());
}

__DATA__
%!PS-Adobe-3.0
%%Creator: changemon
%%DocumentNeededResources: font Helvetica-Bold
%%Pages: 1
%%BeginProlog
/inch {72 mul} def

/doFont { findfont exch scalefont setfont } def
%             size face       
/TitleFont  {   18 /Helvetica-Bold  doFont } def
/LabelFont  {   11 /Helvetica-Bold  doFont } def
/FieldFont  {   11 /Helvetica       doFont } def

/newline { /vpos vpos 0.34 inch sub def } def
/Field { 
  % Label Value
  LabelFont 2.25 inch vpos moveto show
  FieldFont 0.75 inch vpos moveto show
} def
/Field2 { 
  % Label Value
  LabelFont 6.00 inch vpos moveto show
  FieldFont 4.50 inch vpos moveto show
} def

/BeginEPSF { %def
  /b4_Inc_state save def                % Save state for cleanup
  /dict_count countdictstack def        % Count objects on dict stack
  /op_count count 1 sub def             % Count objects on operand stack
  userdict begin                        % Push userdict on dict stack
  /showpage { } def                     % Redefine showpage, { } = null proc
  0 setgray 0 setlinecap                % Prepare graphics state
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where                  % If level not equal to 1 then
  {pop languagelevel                    % set strokeadjust and
  1 ne                                  % overprint to their defaults.
    {false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF { %def
  count op_count sub {pop} repeat       % Clean up stacks
  countdictstack dict_count sub {end} repeat
  b4_Inc_state restore
} bind def
%%EndProlog
%%BeginSetup
%%IncludeResource: font Helvetica-Bold
%%EndSetup
%%Page: 1 1

% Runoffs Logo -- copy bbox from logo EPS header
/logo_bbox { @logo_bbox@ } def
/logo_scale @logo_scale@ def

BeginEPSF
% logo_bbox
% 3 -1 roll sub logo_scale mul 10.75 inch exch sub
% 3 1 roll exch sub logo_scale mul 8.25 inch exch sub
% exch translate
.25 inch 10.75 inch
logo_bbox exch pop exch sub exch pop
logo_scale mul sub translate
logo_scale dup scale
logo_bbox pop pop neg exch neg exch translate
%%BeginDocument: @logo_file@
@logo_data@
%%EndDocument
EndEPSF

% Page Title
TitleFont
(ACTION)
dup stringwidth pop
8.5 inch exch sub 2 div
9.75 inch 
moveto show

/vpos 9.10 inch def
(Action Number)       (@act_number@)       Field
(Received)            (@act_datetime@)     Field2 newline
(Type)                (@act_type@)         Field
(Initiated By)        (@act_initiated_by@) Field2 newline
(Session)             (@_session@)         Field  newline
@__entries__@
(Penalty)             (@act_tech_penalty@) Field  newline
(GCR/Supp Ref.)       (@act_gcr_section@)  Field  newline
(By order of)         (@_auth@)            Field  newline
@__details__@

(Cleared)        2.25 inch 3.19 inch moveto show
(Withdrawn)      2.25 inch 2.96 inch moveto show
3.8 inch 3.19 inch moveto 4.5 inch 3.19 inch lineto stroke
3.8 inch 2.96 inch moveto 4.5 inch 2.96 inch lineto stroke

(Orbits A)       2.25 inch 2.50 inch moveto show (by) 4.75 inch 2.50 inch moveto show
(Orbits B)       2.25 inch 2.27 inch moveto show (by) 4.75 inch 2.27 inch moveto show
(Orbits C)       2.25 inch 2.04 inch moveto show (by) 4.75 inch 2.04 inch moveto show
(Excel database) 2.25 inch 1.81 inch moveto show (by) 4.75 inch 1.81 inch moveto show

3.8 inch 2.50 inch moveto 4.5 inch 2.50 inch lineto stroke
3.8 inch 2.27 inch moveto 4.5 inch 2.27 inch lineto stroke
3.8 inch 2.04 inch moveto 4.5 inch 2.04 inch lineto stroke
3.8 inch 1.81 inch moveto 4.5 inch 1.81 inch lineto stroke

5.25 inch 2.50 inch moveto 6.625 inch 2.50 inch lineto stroke
5.25 inch 2.27 inch moveto 6.625 inch 2.27 inch lineto stroke
5.25 inch 2.04 inch moveto 6.625 inch 2.04 inch lineto stroke
5.25 inch 1.81 inch moveto 6.625 inch 1.81 inch lineto stroke

showpage
%%Trailer
%%Pages: 1
