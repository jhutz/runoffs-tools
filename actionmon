#!/usr/bin/perl

use Archive::Zip qw(:ERROR_CODES :CONSTANTS);
use File::Basename;
use Getopt::Std;
use HTML::Parser;
use IO::File;
use IO::Pipe;
use LWP;
use POSIX qw(strftime);
use URI::Escape;
use Text::Wrap;

use strict;
use vars qw($PROG $PROGDIR %ClassKey);
use vars qw($DEBUG $VERBOSE $GETONLY $MONITOR $REPORT $UPDATE $FORCE);
use vars qw($OutDir $Template $Printer $SERVER $USERID $PASSWD);
use vars qw($URLBase $LoginURL $ListURL $GetURL $UA %FormInputs);

$PROG = File::Spec->rel2abs($0);
$PROGDIR = dirname($PROG);

$SERVER   = '172.16.20.2';
$USERID   = 'tands1';
$OutDir   = "$PROGDIR/../Actions";
$Template = join('', <DATA>);

$Text::Wrap::unexpand = 0;

%ClassKey = (
  '7928a7ec-6a51-4f92-b776-099562b23a02' => 'Qualifying 09/19 08:00 FM',
  'f77275f1-3da9-4889-86dd-5b632968e97d' => 'Qualifying 09/19 08:00 FE',
  '620b990b-cff2-4c89-83d6-63d95d198ffd' => 'Qualifying 09/19 08:00 P1',
  'fa228d7c-8437-4da1-bbea-69eca4500572' => 'Qualifying 09/19 08:40 GT3',
  'c90e36f3-50ce-443b-aa0b-09a078f99438' => 'Qualifying 09/19 08:40 AS',
  '229e79c4-5404-4f1e-8f0e-e28a9e59ac49' => 'Qualifying 09/19 09:20 T3',
  '87ac131d-5fb9-4749-95cf-e657d05a0c4f' => 'Qualifying 09/19 09:20 SRF',
  'fc9b9ce9-0e00-4b04-81e2-e79d2509510e' => 'Qualifying 09/19 10:00 T2',
  '72741c31-ee0b-4eb0-a78f-8604d41050a2' => 'Qualifying 09/19 10:00 FC',
  '3cd37565-0105-40f7-b2b9-1307324fc041' => 'Qualifying 09/19 10:00 FA',
  'dc90ee59-816d-4f31-80fb-4114e272f3c3' => 'Qualifying 09/19 10:40 SM',
  'f5c9fe87-706e-4d85-9662-5fdda93c4329' => 'Qualifying 09/19 11:05 FV',
  '10f098e5-1d99-4b8b-8b75-7a1a11b8a3fd' => 'Qualifying 09/19 11:30 FP',
  '12a38733-cdc9-4466-b1b6-a1f1a9d69dc3' => 'Qualifying 09/19 12:45 STL',
  '0b5613f3-982f-48b8-acd8-dce62adc5c25' => 'Qualifying 09/19 13:10 SRF3',
  'c15352e2-bf87-4d01-a1e0-f94c14d37dc0' => 'Qualifying 09/19 13:35 GTL',
  '9291d894-c0bb-43cd-9d04-4dc40bae31c7' => 'Qualifying 09/19 13:35 F5',
  '7ed15c57-d918-4e2b-9812-cf4f7487be45' => 'Qualifying 09/19 14:15 FF',
  '73ca69d3-3f67-49ca-9dc8-ac767e7ff977' => 'Qualifying 09/19 14:15 EP',
  '8c361e89-1c2b-4e89-af3a-df7c8494802b' => 'Qualifying 09/19 14:55 FB',
  'fefc7a58-2030-42a4-a41c-60793c83c35c' => 'Qualifying 09/19 14:55 STU',
  'fa7eca8f-0995-4891-885a-4f31770dbe22' => 'Qualifying 09/19 15:35 GT2',
  'd86cef63-e017-4986-8c37-19a6413a8a40' => 'Qualifying 09/19 16:00 HP',
  '40ef6c40-f457-41b4-8871-3a5f612ac311' => 'Qualifying 09/19 16:25 P2',
  'c26a33b4-d8f7-46e4-922f-b858112e425a' => 'Qualifying 09/19 16:25 GT1',
  '970f441b-d587-4e6d-8aef-9e53333e1792' => 'Qualifying 09/19 16:25 T1',
  '70d88eba-c199-43b1-88f6-82f8f73fb1b0' => 'Qualifying 09/19 17:05 T4',
  '552a3a28-8dfd-4bdf-9389-efe634669439' => 'Qualifying 09/19 17:05 B-Spec',
  '5db2a7b1-342b-485d-8341-e804aa743a9a' => 'Qualifying 09/20 08:00 SRF',
  'b4ecb40f-882d-459e-bea3-3f230ee913a8' => 'Qualifying 09/20 08:00 T3',
  'f9ce261d-8662-46c9-a7d0-4de8a1c54532' => 'Qualifying 09/20 08:40 GT3',
  'ab71e820-fa52-47d9-b1ea-a524a919f372' => 'Qualifying 09/20 08:40 AS',
  'ad9a71f7-bf65-4275-9706-8a441a3af6cc' => 'Qualifying 09/20 09:20 FM',
  '0f315a94-e697-4efd-bd68-9420e1bd262d' => 'Qualifying 09/20 09:20 FE',
  'df597102-d331-4233-83bd-3af85c6c551c' => 'Qualifying 09/20 09:20 P1',
  '20caa728-1084-4f3a-bc13-481642896560' => 'Qualifying 09/20 10:00 T2',
  '66db611f-0a54-4ff3-b0e9-21d986d67d63' => 'Qualifying 09/20 10:00 FC',
  '139e19c6-24d9-44ab-a7ce-6df515a272c4' => 'Qualifying 09/20 10:00 FA',
  'c3de2932-6b54-4063-81c5-b786f9b8165c' => 'Qualifying 09/20 10:40 SM',
  '9b019fbd-e761-43dc-b0f0-72b71ce4a211' => 'Qualifying 09/20 11:05 FP',
  '189f7427-bfe4-40ec-a7f6-60100d832eb4' => 'Qualifying 09/20 11:30 FV',
  '7bf69c46-3e57-44a6-9085-deae764aed68' => 'Qualifying 09/20 12:45 STL',
  '3b52bbea-c34d-4a79-a355-5fee8e46e780' => 'Qualifying 09/20 13:10 SRF3',
  '99a585f8-0f06-4ba9-873d-eb9939f9c4b6' => 'Qualifying 09/20 13:35 F5',
  '16d542ec-c1b3-45e7-87e3-fb6471a4d491' => 'Qualifying 09/20 13:35 GTL',
  '0abc2834-361f-4387-8367-9108b138d300' => 'Qualifying 09/20 14:15 EP',
  '9d588617-188d-4515-9721-5e64a6d48ad7' => 'Qualifying 09/20 14:15 FF',
  '91ee784b-6b65-4b62-a23d-58925009bfdc' => 'Qualifying 09/20 14:55 P2',
  '496fe506-f3fc-42ad-a366-17a9683f47ea' => 'Qualifying 09/20 14:55 GT1',
  '182c4642-ee59-4bfa-bcba-942b10688dd4' => 'Qualifying 09/20 14:55 T1',
  'e35f8f7e-b3b0-437d-be83-dccd9666ab35' => 'Qualifying 09/20 15:35 B-Spec',
  'bec6945d-e070-4b87-8e8e-ce596446800e' => 'Qualifying 09/20 15:35 T4',
  '6e09ffcd-414e-4438-829f-f9abe8986fbf' => 'Qualifying 09/20 16:00 GT2',
  '130fd3a9-910f-4068-9400-169902f609b8' => 'Qualifying 09/20 16:25 STU',
  '5e996338-0727-4273-8226-7ef651a56762' => 'Qualifying 09/20 16:25 FB',
  '149c671f-d204-4d38-a908-13386edb29b3' => 'Qualifying 09/20 17:05 HP',
  '15eaa7aa-c82d-4176-9cf6-f30c0b90f05a' => 'Qualifying 09/21 08:00 FE',
  '263ee43d-b3e5-4ea2-931f-c2d7f9879aa2' => 'Qualifying 09/21 08:00 P1',
  '69886b07-44ea-441f-b930-a558d020e0d7' => 'Qualifying 09/21 08:00 FM',
  'd03dbb5b-248b-47ce-a4b9-b91b4474a8bf' => 'Qualifying 09/21 08:40 AS',
  '5326564e-b8d3-49f1-b85f-9155a21fe6eb' => 'Qualifying 09/21 08:40 GT3',
  '2b8e31f4-71bc-4514-b551-a33c35436083' => 'Qualifying 09/21 09:20 SRF',
  'bcabcb63-d9f5-4df4-b647-5577f84671eb' => 'Qualifying 09/21 09:20 T3',
  '0d7f0590-5ebf-4f58-aea4-0fff28dd2e77' => 'Qualifying 09/21 10:00 T2',
  '89cf531a-7b7a-4447-9096-494aa183bcf7' => 'Qualifying 09/21 10:00 FA',
  '46f739ee-d2a4-4ba9-870f-bf5e44179f79' => 'Qualifying 09/21 10:00 FC',
  'a26db4be-02c3-4c43-9c19-c78342acc9f3' => 'Qualifying 09/21 10:40 SM',
  'a10d824d-ab88-4dd9-b8cf-bd355650a84d' => 'Qualifying 09/21 11:05 FV',
  '57c938c1-28fb-46c8-8077-d93611eab775' => 'Qualifying 09/21 11:30 FP',
  '1dbf5831-349a-4cee-8e22-14be62e2eea7' => 'Qualifying 09/21 12:45 SRF3',
  '4acf3b1f-f9a2-4da9-aa49-1f833d092f4d' => 'Qualifying 09/21 13:10 STL',
  '8c9be2b0-d135-4628-b31c-21d10e14ece2' => 'Qualifying 09/21 13:35 GTL',
  'fac1e26d-f4ea-45b9-b0c6-c4aa29479cfb' => 'Qualifying 09/21 13:35 F5',
  '0fde91ef-eb86-4e4e-8720-49b921901991' => 'Qualifying 09/21 14:15 FF',
  'e649f75f-953b-4e57-b23b-61ad6fecefd5' => 'Qualifying 09/21 14:15 EP',
  'e41a9b6c-3dcc-49da-a563-2906f62b507d' => 'Qualifying 09/21 14:55 FB',
  'e73f6fc2-d592-46c8-b3d4-be878128b1f7' => 'Qualifying 09/21 14:55 STU',
  '92264c6f-e6bb-4700-8ef8-4171ea09d0d3' => 'Qualifying 09/21 15:35 HP',
  '282d83c8-e817-43e0-bfeb-ac2e5f1621e5' => 'Qualifying 09/21 16:00 T4',
  'faba19b2-2d88-41b7-9ace-b4a6edd7539c' => 'Qualifying 09/21 16:00 B-Spec',
  'db96075c-4071-4627-baff-a1b6307d15f1' => 'Qualifying 09/21 16:25 GT1',
  '4c6ae18c-8222-4ce2-a1ff-c38590a3df65' => 'Qualifying 09/21 16:25 P2',
  '79c54254-571a-4d61-ba1f-65b9cfb6c7bc' => 'Qualifying 09/21 16:25 T1',
  'f8317a03-5c01-4e37-85f7-834459e65db8' => 'Qualifying 09/21 17:05 GT2',
  '4686ffb8-5a9b-4bb4-a9fb-839c770bc7c4' => 'Qualifying 09/22 08:00 T3',
  'd37e1ecb-8397-4176-a23b-ab7ece68f309' => 'Qualifying 09/22 08:00 SRF',
  'cf7a534e-aa48-48cb-ba94-55224804daa2' => 'Qualifying 09/22 08:40 AS',
  'e982c272-0a22-4e16-8df9-0069608f69ad' => 'Qualifying 09/22 08:40 GT3',
  'd4a84949-cfb4-44fb-b0a2-b5de18acb051' => 'Qualifying 09/22 09:20 FE',
  'f2411ee7-a50c-419b-8fff-a0805ed70583' => 'Qualifying 09/22 09:20 P1',
  'abb3b71f-1704-4f38-a998-d56878904638' => 'Qualifying 09/22 09:20 FM',
  '17c0b034-71bb-4da3-ad8e-fe265e53d300' => 'Qualifying 09/22 10:00 FA',
  '07ba6d14-48a8-4e5a-9cd7-aa4836d4ea92' => 'Qualifying 09/22 10:00 FC',
  'dfc62287-5a1f-4def-95a6-547e9c2e8b7b' => 'Qualifying 09/22 10:00 T2',
  '2df392b9-1a8c-455b-8ad8-ac895739c4b6' => 'Qualifying 09/22 10:40 SM',
  '8bd4cd42-17cd-489d-813a-06b831f8cc98' => 'Qualifying 09/22 11:05 FP',
  '6dde5309-ca28-43b7-9ebc-37731d7fee60' => 'Qualifying 09/22 11:30 FV',
  '401814b5-454d-47be-8be9-0705f031985a' => 'Qualifying 09/22 12:45 STL',
  '5ddb4ff4-3017-4140-851f-0d9205c76cea' => 'Qualifying 09/22 13:10 SRF3',
  '0a191136-d356-4675-988a-352cfcfc4bc8' => 'Qualifying 09/22 13:35 F5',
  '074715e8-6e9d-4d89-9c46-768cf9999edb' => 'Qualifying 09/22 13:35 GTL',
  'c899ecb9-b1b9-4414-9905-ec4e7780f730' => 'Qualifying 09/22 14:15 FF',
  '004c6775-d06c-4bf1-b257-ede2ebcf01b8' => 'Qualifying 09/22 14:15 EP',
  'e8219b14-f5ae-4733-8044-72e717d5315a' => 'Qualifying 09/22 14:55 T1',
  '6ecc17ea-a1eb-4c08-9129-4b6f99b464ab' => 'Qualifying 09/22 14:55 P2',
  '899d394d-3793-4344-81c9-5b0edb319884' => 'Qualifying 09/22 14:55 GT1',
  '5cc7ba7c-0778-43e4-a58c-9a24fe8a1960' => 'Qualifying 09/22 15:35 GT2',
  '301cf49c-0e21-4d4c-bf14-886851e264be' => 'Qualifying 09/22 16:00 HP',
  '07fcffc1-42e3-421c-9524-4c1ed8fcb05b' => 'Qualifying 09/22 16:25 STU',
  'dd5a82d8-6fd9-4974-a08d-25190adc18c9' => 'Qualifying 09/22 16:25 FB',
  'f8176885-3704-4b05-8436-a4f8dcc17b4a' => 'Qualifying 09/22 17:05 B-Spec',
  '78757a03-701c-4c5a-9548-ee8a56931581' => 'Qualifying 09/22 17:05 T4',
  '39926be0-26cc-44a9-9f18-71e7943c90ce' => 'Race 09/23 08:05 FE',
  'de504661-38bb-41e0-8f0c-3db4194e03f7' => 'Race 09/23 09:00 AS',
  '89d46bcd-4fb9-4bcf-9c97-0d2b985cb27d' => 'Race 09/23 09:55 P1',
  '64fe64af-2127-41ea-bc59-ebc3f9e09085' => 'Race 09/23 10:50 T2',
  'c55d08d0-1a9b-4eb7-b475-c2d8969f2534' => 'Race 09/23 11:45 FV',
  'fb3e6e21-d2da-40c2-bff4-478396434fe9' => 'Race 09/23 13:30 EP',
  'e8002dfe-e10a-45f2-99cc-e2ae75566bbb' => 'Race 09/23 14:25 F5',
  'cdda451c-83e8-46ed-bd23-1c5c207283cc' => 'Race 09/23 15:20 STU',
  '9ab16ece-84e8-4029-901e-4a0ab66a60d4' => 'Race 09/23 16:15 GT2',
  '6eb407f1-2d76-4e6b-8c67-fd8b29e335ed' => 'Race 09/23 17:10 T4',
  'a745f632-6781-463f-b149-395416d51f9b' => 'Race 09/24 08:15 T3',
  '8bb20562-9a10-456d-a984-36183ca6d2e5' => 'Race 09/24 09:10 SRF',
  '5bc1826a-a99f-4c4e-9155-457a9e219966' => 'Race 09/24 10:05 FM',
  '95638c78-5e76-40f8-969a-806786067d55' => 'Race 09/24 11:00 SM',
  '75522d17-249d-4ddd-a322-9061622578cd' => 'Race 09/24 12:45 STL',
  '63c56415-4580-49ae-9c91-7627169c6f51' => 'Race 09/24 13:40 GTL',
  '2ba5817f-4938-4280-b5f2-03fa9f7d0539' => 'Race 09/24 14:35 FB',
  'de63ecde-d0a0-41ac-a584-4d163b9ed0cc' => 'Race 09/24 15:30 HP',
  '3704d849-2446-4321-bb1e-e82d3067ca81' => 'Race 09/24 16:25 B-Spec',
  '7390e5b7-b8e0-4b96-b08c-b7f589822f94' => 'Race 09/25 08:30 FA',
  '5cf15511-2f94-43e9-a006-c238da55bfe8' => 'Race 09/25 09:25 GT3',
  'da6097be-2907-4868-8bb2-5e59c01731ce' => 'Race 09/25 10:20 FC',
  'f4e415b4-2306-4f88-897a-cfc88c3e74de' => 'Race 09/25 11:15 FP',
  '726ac969-3bac-4a97-ae43-00c3137227be' => 'Race 09/25 13:00 FF',
  '626ce1a9-d8da-4fa9-9721-6cfa1ffaac3f' => 'Race 09/25 13:55 SRF3',
  '5666c63d-af05-49d0-b49b-2ae3a982b731' => 'Race 09/25 14:50 T1',
  '7ebe40e7-1c8d-4200-8fe0-7864a4b0eb2c' => 'Race 09/25 15:45 P2',
  'b51127d6-0af7-421e-972b-8a0436911b55' => 'Race 09/25 16:40 GT1',
);

sub usage  {
  print STDERR @_, "\n" if @_;
  print <<'EOF';
Usage: actionmon [-dvx] [-H host] [-U user] [-P pass] [-o outdir] [-p printer]
                 [-rm] [file]
       actionmon [-dvx] [-H host] [-U user] [-P pass] [-o outdir] [-p printer]
                 -u [-f] act_no...
       actionmon -h
  -d  Debug
  -h  This help message
  -x  Fetch data file only
  -v  Verbose action list

  -r  Print a summary report
  -m  Continually monitor the action system
  -u  Update specified actions...
      with -x, fetch action detail file(s) only
      with -f, force replace/reprint of existing action

  -H  action system server host
  -U  action system userid
  -P  action system password
  -o  Output directory [$OutDir]
  -p  Print to specified printer

EOF
  exit !!@_;
}

sub parse_args () {
  my %opts;

  getopts('dfhmruvxo:p:H:U:P:', \%opts) or usage("Invalid option!");
  usage()    if $opts{h};
  $DEBUG++   if $opts{d};
  $VERBOSE++ if $opts{v};
  $GETONLY++ if $opts{x};
  $REPORT++  if $opts{r};
  $MONITOR++ if $opts{m};
  $UPDATE++  if $opts{u};
  $FORCE++   if $opts{f};

  $OutDir   = $opts{o} if defined $opts{o};
  $Printer  = $opts{p} if defined $opts{p};
  $SERVER   = $opts{H} if defined $opts{H};
  $USERID   = $opts{U} if defined $opts{U};
  $PASSWD   = $opts{P} if defined $opts{P};

  $URLBase  = "http://$SERVER/racecontrol/";
  $LoginURL = $URLBase . 'Login.aspx';
  $ListURL  = $URLBase . 'Actions.aspx';
  $GetURL   = $URLBase . 'GetAction.aspx?ActionNum=';
}


sub process_form ($) {
  my($text) = @_;

  %FormInputs = ();
  my $P = new HTML::Parser(start_h => [ sub {
        my($attrs) = @_;
        $FormInputs{$$attrs{name}} = $$attrs{value};
    }, "attr"]);

  $P->parse($text);
}


sub submit_form ($) {
  my($url) = @_;

  my $req = new HTTP::Request(POST => $url);
  $req->content_type('application/x-www-form-urlencoded');
  $req->content(join('&',
      map($_ . '=' . uri_escape($FormInputs{$_}), keys %FormInputs)));
  my $res = $UA->request($req);
  die $res->status_line . "\n" unless $res->is_success;
  $res->content;
}


sub parse_action ($;$) {
  my($text, $update) = @_;
  my(@actions, $action, $sfield, $field, $ftext);

  if (defined($update)) {
    @actions = ($action = $update);
  }

  my $P = new HTML::Parser(
    start_h => [ sub {
        my($tag, $attrs) = @_;

        if (!defined($update) && $tag eq 'tr' &&
          ($$attrs{class} eq 'rgRow' || $$attrs{class} eq 'rgAltRow')) {
          my $rownum = $$attrs{id};
          $rownum =~ s/.*_//;
          $action = { _rownum => $rownum };
          unshift(@actions, $action);

        } elsif ($tag eq 'span' && $$attrs{id} =~ /RadGrid.*_ctl\d+_/) {
          $field = $';
          $field =~ s/^EditFormControl_//;
          $field =~ s/Label$//;
          $field =~ s/_displayonly$//;
          $ftext = undef;

        } elsif ($tag eq 'span' && $update) {
          $field = $$attrs{id};
          $ftext = undef;

        } elsif ($tag eq 'select' && $$attrs{id} =~ /RadGrid.*_ctl\d+_/) {
          $sfield = $';
          $sfield =~ s/^EditFormControl_//;
          $sfield =~ s/Label$//;
          $sfield =~ s/_displayonly$//;
          if ($sfield eq 'act_cls_key') { $sfield = '_session' }

        } elsif ($tag eq 'option' && defined $sfield && $$attrs{selected}) {
          $field = $sfield;
          $ftext = undef;

        } elsif ($tag eq 'br') {
          $ftext .= "\n";
        }
      }, "tagname,attr" ],
    end_h => [ sub {
        my($tag) = @_;
        $ftext =~ s/^\s*//;
        $ftext =~ s/\s*$//;
        if (($tag eq 'span' || $tag eq 'option') && defined($field)) {
          if ($ftext ne '' || $$action{$field} eq '') {
            $$action{$field} = $ftext;
          }

        } elsif ($tag eq 'td' && defined($action)
          && !exists($$action{_act_key})) {
          $$action{_act_key} = $ftext;

        } elsif ($tag eq 'td' && defined($action)
          && !exists($$action{_cls_key})) {
          $$action{_cls_key} = $ftext;

        } elsif ($tag eq 'select') {
          $sfield = undef;
        }

        if ($tag ne 'br') {
          $field = undef;
          $ftext = undef;
        }
      }, "tagname" ],
    text_h => [ sub { $ftext .= $_[0] }, "dtext" ],
  );

  $P->parse($text);
  @actions;
}


#sub get_action_detail ($$$) {
#  my($aid, $rownum, $cls_key) = @_;
#  my $path = "/tmp/a$aid.html";
#
#  if (-f $path) {
#    my $F = new IO::File($path, O_RDONLY) or die "$path: $!\n";
#    my $text = join('', <$F>);
#    $F->close;
#    return $text;
#  }
#  return undef;
#}


sub get_action_detail ($$$) {
  my($aid, $rownum, $cls_key) = @_;

  my $req = new HTTP::Request(GET => $GetURL . $aid);
  my $res = $UA->request($req);
  die $res->status_line . "\n" unless $res->is_success;
  return $res->content;
}


sub make_report ($$$) {
  my($template, $out, $fields) = @_;

  $template =~ s/\@(\w+)\@/$$fields{$1}/g;
  my $F = new IO::File("$out.new", O_RDWR|O_CREAT|O_TRUNC, 0666)
    or die "$out.new: $!\n";
  print $F $template;
  $F->close;
  rename("$out.new", $out);
}


sub process_actions ($) {
  my($text) = @_;
  my(@actions, $report, $summary, $mreport, $count);

  my $start = strftime("%b %d %H:%M", localtime(time));

  process_form($text);
  @actions = parse_action($text);

  foreach my $a (@actions) {
    my $aid = $$a{act_number};
    my $path = "$OutDir/$aid.ps";
    my $stamp = strftime("%b %d %H:%M", localtime(time));

    if ($UPDATE) {
      #print "$aid / ", join(' ', @ARGV), "\n";
      next unless grep($aid == $_, @ARGV);
    } else {
      print "$stamp DUP $aid\n" if $MONITOR && $VERBOSE && -f $path;
      next if -f $path;
    }

    # This will get overwritten with a longer form in the detail page
    $$a{_short_desc} = $$a{act_description};

    my $atext = get_action_detail($aid, $$a{_rownum}, $$a{_cls_key});
    if ($GETONLY) {
      print $atext;
      next if $UPDATE;
    }
    parse_action($atext, $a);

    $$a{_session} = $ClassKey{$$a{act_cls_key}} if $$a{_session} eq '';
    ($$a{_date}, $$a{_time}) = split(' ', $$a{act_datetime});
    if    ($$a{act_type} eq 'CSA')     { $$a{_auth} = 'Chief Steward' }
    elsif ($$a{act_type} eq 'RFA')     { $$a{_auth} = 'SOM'           }
    elsif ($$a{act_type} eq 'Protest') { $$a{_auth} = 'SOM'           }
    else                               { $$a{_auth} = $$a{act_type}   }

    # The distinction between protestor and protestee is meaningless to us
    # because only the former is normally filled in except on a protest
    # and because on a protest or appeal, either one could be affected.
    # Further, either of these fields may contain multiple entries!
    # So for our purpose, consolidate into lists of cars, classes, and
    # drivers.

    my @cars    = (split(m{\n}m, $$a{protestorCar}),
                   split(m{\n}m, $$a{protesteeCar}));
    my @classes = (split(m{\n}m, $$a{protestorClass}),
                   split(m{\n}m, $$a{protesteeClass}));
    my @drivers = (split(m{\n}m, $$a{protestor}),
                   split(m{\n}m, $$a{protestee}));
    my @entries = map([ $cars[$_], $classes[$_], $drivers[$_] ], 0.. $#cars);
    $$a{_entries_split} = [ @entries ];
    $$a{_entries_full}  = [ map("#$$_[0] $$_[1] $$_[2]", @entries) ];
    $$a{_entries_brief} = join(', ', map("#$$_[0] $$_[1]", @entries));

    if (@entries) {
      foreach (@{$$a{_entries_full}}) {
        $$a{__entries__} .= "() ($_) Field newline\n";
      }
      $$a{__entries__} =~ s/^\(\)/(Car(s))/;
    } else {
      $$a{__entries__} = "(Car(s)) ((none listed)) Field newline\n";
    }

    my $desc = wrap('', '', $$a{act_description});
    $desc =~ s/\n*$//;
    foreach (split(/\n/, $desc)) {
      $$a{__details__} .= "() ($_) Field newline\n";
    }
    $$a{__details__} =~ s/^\(\)/(Details)/;

    $report = sprintf("#%3d %-5s %-5s %-7s %s\n  %s\n",
      $$a{act_number}, $$a{_date}, $$a{_time}, $$a{act_type},
      @entries > 1 ? $$a{_entries_brief} : $$a{_entries_full}[0],
      $$a{_short_desc});

    if (!$UPDATE && (
        $$a{act_number} eq '' || !$$a{act_datetime} ||
        !$$a{act_type} || !$$a{act_initiated_by} || !@entries)) {
      $report .= "  NOT READY\n";
      $mreport .= "$stamp $report";
      print $report if $VERBOSE;
      next;
    }

    $summary .= $report;
    $mreport .= "$stamp $report";
    print $report if $VERBOSE;
    $count++;

    $report = sprintf("  CS:%-3s   SOM:%-3s   COA:%-3s   HOLD:%-3s   REMOVE:%s\n",
      $$a{CsAcked}, $$a{SomComplete}, $$a{CoaComplete}, $$a{HoldResults},
      $$a{act_delete_flag} ? "YES" : "NO");

    $report .= "  $$a{_session}\n";
    $report .= "  $$a{act_tech_penalty}\n" if $$a{act_tech_penalty};
    $report .= "  per $$a{_auth} ($$a{act_gcr_section})\n";
    $report =~ s/per  \(/\(/;
    $report =~ s/\n\s+\(\)\n\Z/\n/;
    $summary .= $report;
    print $report if $VERBOSE;

    $summary .= "\n";
    print "\n" if $VERBOSE;

    if ($DEBUG) {
      print STDERR "Action $aid:\n";
      print STDERR map(sprintf("  %-20s  %s\n", "$_:", $$a{$_}), sort keys $a);
      print STDERR "\n";
    }

    if ($FORCE || ! -f $path) {
      make_report($Template, $path, $a);
      system ('lp', "-d$Printer", $path) if $Printer;
    }
  }


  if ($MONITOR) {
    my $done = strftime("%b %d %H:%M", localtime(time));
    print $mreport unless $VERBOSE;
    printf "%s -> %s %d actions\n", $start, $done, $count;
  }
  if ($REPORT && $Printer && $summary) {
    # Print a summary report
    my $P = new IO::Pipe;
    $P->writer('lp', "-d$Printer") or die "lp: $!\n";
    print $P ' ' x 25, "*** ACTION SUMMARY REPORT ***\n";
    print $P $summary;
    $P->close;
  }
}


sub get_data () {
  my $req = new HTTP::Request(GET => $ListURL);
  my $res = $UA->request($req);
  die $res->status_line . "\n" unless $res->is_success;
  my $text = $res->content;

  if ($text =~ /type="password"/) {
    process_form($res->content);
    foreach (grep(/userid/i,   keys %FormInputs)) { $FormInputs{$_} = $USERID }
    foreach (grep(/password/i, keys %FormInputs)) { $FormInputs{$_} = $PASSWD }
    $text = submit_form($LoginURL);
  }

  return $text;
}

parse_args;


## Fetch the data file
$UA = new LWP::UserAgent;
$UA->cookie_jar( {} );
push @{ $UA->requests_redirectable }, 'POST';
$UA->show_progress(1);

if ($UPDATE) {
  process_actions(get_data());
} elsif ($GETONLY) {
  print get_data();
} elsif (@ARGV) {
  process_actions(join('', <>));
} elsif ($MONITOR) {
  while (1) {
    process_actions(get_data());
    sleep(30);
  }
} else {
  process_actions(get_data());
}

__DATA__
%!PS-Adobe-3.0
%%Creator: changemon
%%DocumentNeededResources: font Helvetica-Bold
%%Pages: 1
%%BeginProlog
/inch {72 mul} def

/doFont { findfont exch scalefont setfont } def
%             size face       
/TitleFont  {   18 /Helvetica-Bold  doFont } def
/LabelFont  {   11 /Helvetica-Bold  doFont } def
/FieldFont  {   11 /Helvetica       doFont } def

/newline { /vpos vpos 0.34 inch sub def } def
/Field { 
  % Label Value
  LabelFont 2.25 inch vpos moveto show
  FieldFont 0.75 inch vpos moveto show
} def
/Field2 { 
  % Label Value
  LabelFont 6.00 inch vpos moveto show
  FieldFont 4.50 inch vpos moveto show
} def

%%EndProlog
%%BeginSetup
%%IncludeResource: font Helvetica-Bold
%%EndSetup
%%Page: 1 1

% Page Title
TitleFont
(ACTION)
dup stringwidth pop
8.5 inch exch sub 2 div
9.75 inch 
moveto show

/vpos 9.10 inch def
(Action Number)       (@act_number@)       Field
(Received)            (@act_datetime@)     Field2 newline
(Type)                (@act_type@)         Field
(Initiated By)        (@act_initiated_by@) Field2 newline
(Session)             ()                   Field  newline
@__entries__@
(Penalty)             (@act_tech_penalty@) Field  newline
(GCR/Supp Ref.)       (@act_gcr_section@)  Field  newline
(By order of)         (@_auth@)            Field  newline
@__details__@

(Cleared)        2.25 inch 3.19 inch moveto show
(Withdrawn)      2.25 inch 2.96 inch moveto show
3.8 inch 3.19 inch moveto 4.5 inch 3.19 inch lineto stroke
3.8 inch 2.96 inch moveto 4.5 inch 2.96 inch lineto stroke

(Orbits A)       2.25 inch 2.50 inch moveto show (by) 4.75 inch 2.50 inch moveto show
(Orbits B)       2.25 inch 2.27 inch moveto show (by) 4.75 inch 2.27 inch moveto show
(Orbits C)       2.25 inch 2.04 inch moveto show (by) 4.75 inch 2.04 inch moveto show
(Excel database) 2.25 inch 1.81 inch moveto show (by) 4.75 inch 1.81 inch moveto show

3.8 inch 2.50 inch moveto 4.5 inch 2.50 inch lineto stroke
3.8 inch 2.27 inch moveto 4.5 inch 2.27 inch lineto stroke
3.8 inch 2.04 inch moveto 4.5 inch 2.04 inch lineto stroke
3.8 inch 1.81 inch moveto 4.5 inch 1.81 inch lineto stroke

5.25 inch 2.50 inch moveto 6.625 inch 2.50 inch lineto stroke
5.25 inch 2.27 inch moveto 6.625 inch 2.27 inch lineto stroke
5.25 inch 2.04 inch moveto 6.625 inch 2.04 inch lineto stroke
5.25 inch 1.81 inch moveto 6.625 inch 1.81 inch lineto stroke

showpage
%%Trailer
%%Pages: 1
