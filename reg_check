#!/usr/bin/perl

use Getopt::Std;
use IO::File;

use strict;
use vars qw($DEBUG $QUIET $VERBOSE $OUT $KeyOUT $TabOUT);
use vars qw(@QGroups @RGroups %YearClasses %EngineClasses %FixedMM %Words);
use vars qw(%ColNames %Validate);
use vars qw(@Cols %Cols %QualGroup %QualSub %RaceGroup %Keys);
use vars qw($format $carno $class $name);

# Qualifying Groups (except single classes)
#@QGroups = qw(T2/STU T4/B-Spec P1/P2 FP/HP FF/F5 GT1/GT2 FE/FE2/FM AS/T1 GT3/GTL FA/FB/FC);

# Race Groups (except single classes and qual groups racing all together)
#@RGroups = qw(FE/FE2 FA/FB);

%YearClasses   = map(($_ => 1), qw(EP FP HP SM T1 T2 T3 T4));
%EngineClasses = map(($_ => 1), qw(F5 FA FB FF P1 P2));

my %FM_Word = map(($_ => 1), qw[Star Formula Mazda FM]);
%FixedMM = (
  FE   => [ 'SCCA', 'Mazda FE' ],
  FE2  => [ 'SCCA', 'Mazda FE2' ],
  FM   => [ 'Star',  'Formula Mazda' ],
  SM   => [ 'Mazda', 'Miata' ],
  SRF3 => [ 'SCCA',  'Spec Racer Ford Gen 3' ],
);

## Columns we have special interest in
## RHS of these must be filled in with the actual column header
%ColNames = (
  first    => 'First Name',
  last     => 'Last Name',
  email    => 'Email',
  city     => 'City',
  state    => 'State',
  member   => 'Member #',
  region   => 'Region',
  class    => 'Class',
  car      => 'Car #',
  year     => 'Year',
  txno     => 'Transponder',
  make     => 'Make',
  model    => 'Model',
  engine   => 'Engine',
  color    => 'Color',
  sponsor  => 'Sponsor',
  group    => 'Group',
  mm       => 'Make/Model',
  ht       => 'Hometown',
);

sub usage {
  print STDERR @_, "\n" if @_;
  print <<"EOF";
usage: reg_check [-dqv] [-o out [-kt]] [file...]
       reg_check -h
  -d  Debug
  -h  This help message
  -q  Suppress issues not for registration
  -v  Report minor issues and auto-corrections

  -o  output corrected data to file
  -k  add entry key column
  -t  output in tab-separated format
EOF
  exit !!@_;
}

sub parse_args () {
  my %opts;

  getopts('dhkqtvo:', \%opts) or usage("Invalid option!");
  usage()    if $opts{h};
  $DEBUG++   if $opts{d};
  $QUIET++   if $opts{q};
  $VERBOSE++ if $opts{v};
  $KeyOUT++  if $opts{k};
  $TabOUT = $opts{t} ? "\t" : ',';

  if ($opts{o}) {
    $OUT = new IO::File($opts{o}, O_WRONLY|O_CREAT|O_TRUNC, 0666)
      or die "$opts{o}: $!\n";
  }
}

$format = "%-6s  %3s  %-20.20s  %s";

sub problem {
  my $x = sprintf($format, $class, $carno, $name, join('', @_));
  $x =~ s/\s*$//;
  print "$x\n";
}

sub v_nonblank ($$$;$) {
  my($field, $value, $fields, $clsdep) = @_;
  $clsdep = $clsdep ? " for $class" : '';
  problem("Missing $field$clsdep") unless $value =~ /\S/;
  $value;
}

sub v_numeric ($$$) {
  my($field, $value, $fields) = @_;
  problem("Non-numeric $field ($value)") if $value =~ /\D/;
  $value;
}

sub v_upper ($$$) {
  my($field, $value, $fields) = @_;
  if ($value =~ /[a-z]/) {
    problem('*', "Non-uppercase $field ($value)") if $VERBOSE;
    $value =~ tr/a-z/A-Z/;
  }
  $value;
}

%Words = (
  bmw           => 'BMW',
  deimen        => 'Diemen',
  is            => 'is',
  mazdaspeed    => 'MazdaSpeed',
  rx3           => 'RX-3',
  'rx-3'        => 'RX-3',
  rx7           => 'RX-7',
  'rx-7'        => 'RX-7',
  rx8           => 'RX-8',
  'rx-8'        => 'RX-8',
  spece46       => 'SpecE46',
  sthor         => 'Stohr',
  vandeimen     => 'Van Diemen',
  vandiemen     => 'Van Diemen',
  wf1           => 'WF1',
);
sub v_namecaps ($$$;$) {
  my($field, $value, $fields, $lname) = @_;
  my @words = split(/([^A-Za-z0-9]+)/, $value);
  my($newvalue, $problems);

  if ($value =~ /[^ -~]/) {
    problem("Non-ASCII $field ($value)") unless $QUIET;
    return $value;
  }

  if ($value =~ m#^nissan/datsun#i) {
    # Special case -- / is a word separator, so we can't handle this
    # using the generic spelling/case correction below.
    problem("$field bad make $value\n") unless $QUIET;
    return 'Nissan';
  }

  while (@words) {
    my $word = shift @words;
    if ($word =~ /^[Ss]i$/) {
      # Super-special case
      $newvalue .= $word;
    } elsif (exists($Words{lc($word)})) {
      # Special cases
      $problems++ unless $word eq $Words{lc($word)};
      $newvalue .= $Words{lc($word)};
    } elsif ($word !~ /[a-z]/ || $word =~ /^(de|De|Di|La|Le|Lo|Mc|Mac)?[^a-z][^A-Z]*$/) {
      # well-formed word
      $newvalue .= $word;
    } elsif (grep($_ eq $word, qw(de del du in the von)) && @words
      && ($lname || $newvalue ne '')) {
      # special-case lowercase words
      $newvalue .= $word;
    } else {
      my $nword = ucfirst(lc($word));
      #print STDERR "$word => $nword\n";
      $newvalue .= $nword;
      $problems++;
    }
  }
  problem("$field bad case ($value)") if $problems && !$QUIET;
  $newvalue;
}
sub v_lname ($$$) { v_namecaps($_[0], $_[1], $_[2], 1) }

sub v_comma ($$$) {
  my($field, $value, $fields) = @_;
  if ($value =~ s#,#/#g) {
    problem('*', "$field: change commas to slashes") if $VERBOSE;
  }
  $value;
}

sub v_slash ($$$) {
  my($field, $value, $fields) = @_;
  $value =~ s{\s*/\s*}{/}g;
  $value;
}

sub v_year ($$$) {
  my($field, $value, $fields) = @_;
  if ($value eq '0') {
    problem('*', "$field is 0") if $VERBOSE;
    $value = '';
  }
  #$value = v_nonblank($field, $value, $fields, 1) if $YearClasses{$class};
  $value;
}

sub v_nb_engine ($$$) {
  my($field, $value, $fields) = @_;
  if ($EngineClasses{$class}) {
    v_nonblank($field, $value, $fields, 1);
  } else {
    '';
  }
}

sub v_email ($$$) {
  my($field, $value, $fields) = @_;
  my($hostname, @labels);

  if ($value =~ /\@([A-Z0-9.-]+)$/i) {
    $hostname = $1;
    $hostname =~ s/\.*$//;
    @labels = split(/\./, $hostname);
  }
  if (@labels < 2 || grep(/^$/, @labels)) {
    problem("<$value> doesn't look like an email address");
  }
  $value;
}

sub v_carno ($$$) {
  my($field, $value, $fields) = @_;
  return '' if $value eq '';
  problem("Invalid $field: $value") unless $value =~ /^(1?[0-9])?[0-9]$/;
  $value;
}

sub v_memberid ($$$) {
  my($field, $value, $fields) = @_;
  return '' if $value eq '';
  problem("Strange member ID: $value") if $value =~ /[^0-9_]/;
  $value;
}

sub v_txno ($$$) {
  my($field, $value, $fields) = @_;
  $value =~ s/^0*//;

  return '' if $value eq '';
  if ($value < 100 || ($value >= 10000 && $value < 11000)
    || $value eq substr('123456789', 0, length($value))
    || $value =~ /^([1-9])\1*$/) {
    problem("Strange transponder # $value");
  }
  $value;
}

sub v_bspec ($$$) {
  my($field, $value, $fields) = @_;
  if ($value =~ /^(bs|bspec|b-spec)$/i && $value ne 'B-Spec') {
    problem('*', "$field B-Spec misspelled as $value") if $VERBOSE;
    $value = 'B-Spec';
  } elsif ($value =~ /^gt(?:-|\s*)([123x])$/i && $value ne 'GT'.uc($1)) {
    my $newval = 'GT'.uc($1);
    problem('*', "$field $newval misspelled as $value") if $VERBOSE;
    $value = $newval;
  } elsif ($value =~ /^fe(-|\s*)2$/i && $value ne 'FE2') {
    problem('*', "$field FE2 misspelled as $value") if $VERBOSE;
    $value = 'FE2';
  } elsif ($value =~ /^srf(-|\s*)3$/i && $value ne 'SRF3') {
    problem('*', "$field SRF3 misspelled as $value") if $VERBOSE;
    $value = 'SRF3';
  }
  $value;
}

sub v_fixed_mm ($$$$) {
  my($field, $value, $fields, $ix) = @_;
  if (exists($FixedMM{$class}) && $value ne $FixedMM{$class}[$ix]) {
    problem('*', "Incorrect $field ($value) for class $class") if $VERBOSE;
    $value = $FixedMM{$class}[$ix];
  }
  $value;
}

sub v_fixed_make  ($$$) { v_fixed_mm($_[0], $_[1], $_[2], 0) }
sub v_fixed_model ($$$) { v_fixed_mm($_[0], $_[1], $_[2], 1) }

sub v_miata ($$$) {
  my($field, $value, $fields) = @_;
  return $value if $$fields[$Cols{make}] ne 'Mazda';
  ($_ = $value) =~ s/\s*//g;
  return $value unless m#^(mx-?5(/?miata)?|miata)(mazdaspeed)?([0-9.]+L)?$#i;

  my $year = $$fields[$Cols{year}];
  if (!$year) {
    problem("Missing year for Mazda Miata/MX-5");
    return $value;
  }
  my $oldval = $value;
  if    ($year <= 2005) { $value = 'Miata' }
  elsif ($year <= 2015) { $value = 'MX-5'  }
  else { $value = 'MX-5 Miata' }
  if ($value ne $oldval) {
    problem('*', "$field: $oldval should be $value") if $VERBOSE;
  }
  $value;
}

## Validation functions for each field
## RHS is a list of validation functions
%Validate = (
  first    => [ \&v_nonblank,  \&v_namecaps,  ],
  last     => [ \&v_nonblank,  \&v_lname,     ],
  city     => [ \&v_nonblank,  \&v_namecaps,  ],
  state    => [ \&v_nonblank,  \&v_upper,     ],
  car      => [ \&v_nonblank,  \&v_numeric,   \&v_carno ],
  year     => [ \&v_year,      \&v_numeric,   ],
  txno     => [ \&v_nonblank,  \&v_numeric,   \&v_txno  ],
  email    => [ \&v_nonblank,  \&v_email,     ],
  member   => [ \&v_nonblank,  \&v_memberid,  ],
  region   => [ \&v_nonblank,                 ], #XXX should check abbrev?
  color    => [ \&v_nonblank,  \&v_comma,     ],
  sponsor  => [ \&v_comma,     \&v_slash,     ],
  make     => [ \&v_fixed_make,  \&v_nonblank,  \&v_namecaps,  ],
  model    => [ \&v_fixed_model, \&v_nonblank,  \&v_namecaps, \&v_miata ],
  engine   => [ \&v_nb_engine, \&v_namecaps,  ],
);

# Qualifying Groups (except single classes)
foreach my $group (@QGroups) {
  if ($group =~ m#//#) {
    foreach my $sub (split(m#//#, $group)) {
      next unless $sub =~ m#/#;
      foreach my $class (split(m#/#, $sub)) {
        $QualSub{$class} = $sub;
      }
    }
  } else {
    foreach my $class (split(/\/+/, $group)) {
      $QualGroup{$class} = $group;
    }
  }
}

foreach my $group (@RGroups) {
  foreach my $class (split(/\//, $group)) {
    $RaceGroup{$class} = $group;
  }
}

parse_args;

# Read the header
{
  $_ = <>;
  s/\r?\n$//;
  @Cols = split(/\t/, $_);
  my %fields = map(($Cols[$_] => $_), 0 .. @Cols-1);
  foreach (keys %ColNames) {
    next unless exists $fields{$ColNames{$_}};
    $Cols{$_} = $fields{$ColNames{$_}};
  }
  if ($OUT) {
    print $OUT "MKEY${TabOUT}CKEY${TabOUT}" if $KeyOUT;
    print $OUT join($TabOUT, @Cols), "\r\n";
  }
}

# Load the data and look for problems
printf("$format\n", qw(Class Car Name Problem));
printf("$format\n", map(('=' x $_), qw(6 3 20 25)));
while (<>) {
  s/\r?\n$//;
  my @fields = split(/\t/, $_);
  $carno = $fields[$Cols{car}];
  $class = $fields[$Cols{class}];
  $name = join(' ', $fields[$Cols{first}], $fields[$Cols{last}]);

  # Need to validate/correct class early, since it affects other things.
  foreach my $cb ( \&v_nonblank, \&v_bspec ) {
    $class = $cb->($ColNames{class}, $class, \@fields);
  }
  $fields[$Cols{class}] = $class;
  my $qgroup = $QualGroup{$class};
  my $qsub   = $QualSub{$class};
  my $rgroup = $RaceGroup{$class};
  my $group = defined($Cols{group}) ? $fields[$Cols{group}] : undef;

  # Kludge - fixed make/model for former FM cars in FX
  if ($class eq 'FX' && exists $Cols{make} && exists $Cols{model}) {
    my $mm = $fields[$Cols{make}] . ' ' . $fields[$Cols{model}];
    $mm =~ s/[^a-zA-Z0-9]+/ /g;

    # Figure it's a former FM car if
    # 1) the phrase "Formula Mazda" or "Mazda Formula" appears in make/model
    # 2) no words appear other than "Star", "Formula", "Mazda", and "FM"
    if (($mm =~ /\bFormula\s+Mazda\b/i || $mm =~ /\bMazda\s+Formula\b/i)
      && !grep(!$FM_Word{$_}, split(' ', $mm))) {
      if ($VERBOSE) {
        problem('*', sprintf("Incorrect make/model (%s/%s) for former FM car in FX",
            $fields[$Cols{make}], $fields[$Cols{model}]));
      }
      $fields[$Cols{make}] = 'Star';
      $fields[$Cols{model}] = 'Formula Mazda';
      $fields[$Cols{mm}] = 'Star Formula Mazda' if exists $Cols{mm};
    }
  }

  # Data validation/repair
  foreach my $field (sort keys %Validate) {
    next unless exists $Cols{$field};
    my $value = $fields[$Cols{$field}];
    foreach my $cb (@{$Validate{$field}}) {
      $value = $cb->($ColNames{$field}, $value, \@fields);
    }
    $fields[$Cols{$field}] = $value;
    if (($field eq 'make' || $field eq 'model') && exists $Cols{mm}) {
      $fields[$Cols{mm}] = $fields[$Cols{make}] . ' ' . $fields[$Cols{model}];
      $fields[$Cols{mm}] =~ s/\s+/ /g;
      $fields[$Cols{mm}] =~ s/^\s*//g;
      $fields[$Cols{mm}] =~ s/\s*$//g;
    }
    if (($field eq 'city' || $field eq 'state') && exists $Cols{ht}) {
      $fields[$Cols{ht}] = $fields[$Cols{city}] . ' ' . $fields[$Cols{state}];
      $fields[$Cols{ht}] =~ s/\s+/ /g;
      $fields[$Cols{ht}] =~ s/^\s*//g;
      $fields[$Cols{ht}] =~ s/\s*$//g;
    }
  }

  # Collect counts for duplicate checks
  my $mcx = sprintf("%-9s #%s %s (%s)",
    map($fields[$Cols{$_}], qw(member car class txno)));

  #my $mcx = join(' ', map("$_:$fields[$Cols{$_}]", qw(member class car txno)));
  foreach my $f (qw(member car txno)) {
    next unless $fields[$Cols{$f}] ne '';
    foreach ($class, $qgroup, $qsub, $rgroup, $group) {
      next unless defined $_;
      $Keys{join(':', $_, $f, $fields[$Cols{$f}])} ||= [];
      push(@{$Keys{join(':', $_, $f, $fields[$Cols{$f}])}}, $mcx);
    }
  }

  # Generic format checks
  foreach (0 .. @Cols - 1) {
    problem('*', $Cols[$_], ' contains a comma') if $fields[$_] =~ s/,//g && $VERBOSE;
    problem('*', $Cols[$_], ' contains a quote') if $fields[$_] =~ s/"//g && $VERBOSE;
  }

  if ($OUT) {
    if ($KeyOUT) {
      print $OUT "$fields[$Cols{class}]_$fields[$Cols{member}]$TabOUT";
      print $OUT "$fields[$Cols{class}]_$fields[$Cols{car}]$TabOUT";
    }
    print $OUT join($TabOUT, @fields), "\r\n";
  }
}

print "\nDuplicates:\n";
print "Group         Item      Value            Details\n";
print "============  ========  ===============  ==========\n";
foreach (sort(grep(@{$Keys{$_}} > 1, keys %Keys))) {
  my @mcx = @{$Keys{$_}};
  my($grp, $item, $val) = split(/:/, $_, 3);
  my @classes = map(/#\d+\s+(\S+)/ ? $1 : '??', @mcx);
  if ($classes[0] ne $grp && $classes[0] ne '??'
    && !grep($classes[0] ne $_, @classes)) {
    # All of these are the same class, but $grp is not the class
    # Suppress this set, because it's redundant with what will be
    # printed for the class.
    next;
  }

  printf("%-12s  %-8s  %-15s  %s\n", $grp, $item, $val, $mcx[0]);
  foreach my $mcx (@mcx[1..$#mcx]) {
    print ' ' x 41, $mcx, "\n";
  }
}
