#!/usr/bin/perl

use Data::Dumper;
use Date::Parse;
use File::Basename;
use Getopt::Std;
use IO::File;
use IO::Pipe;
use JSON;
use LWP;
use POSIX qw(strftime);
use Time::Local;
use XML::Parser;

use strict;
use vars qw($DEBUG $VERBOSE $REPORT $MONITOR $GETONLY $ASSIGN);
use vars qw($PROG $PROGDIR $LOGOFILE $LOGOPATH $LOGODATA);
use vars qw($OutDir $TSpath $Template $Printer $BaseURL $ReqURL $UA);
use vars qw($Server $OrgID $User $Password $Event $Segment $StartTS);
use vars qw(%FieldMap %IgnoreField %IgnoreStatus %OfficialField);

$PROG = File::Spec->rel2abs($0);
$PROGDIR = dirname($PROG);
$LOGOFILE = 'scca-runoffs-indy-pos-transparent.eps';
$LOGOPATH = "$PROGDIR/../Images/$LOGOFILE";

$Server   = 'api.motorsportreg.com';
$OrgID    = '2D972A52-AEFB-C397-1165FF2693EB490F';
$User     = 'jhutz';
$Event    = 'C3AFB3D4-A931-D4A2-E0341ADF7D48DF60';
$Segment  = 'C3B23CBC-C8B8-6F0A-63306C2904E30EF1';
$OutDir   = "$PROGDIR/../Changes";
$Template = join('', <DATA>);

# keep: color, sponsor, dateRegistered, email, memberId, region
%FieldMap = (
  vehicleNumber      => 'car',
  classShort         => 'class',
  transponder        => 'tx',
  map(($_ => $_), qw(city year make model engine sponsor region
    firstName lastName)),
);
%IgnoreField  = map(($_ => 1), (qw(
    class classModifier classModifierShort
    group groupShort clubName eventName segment
    dateRegistered clubMemberStatus
    )));
%IgnoreStatus = map(($_ => 1), 'New', 'Confirmed', 'Checked In');
%OfficialField = map(($_ => 1), qw(make model color sponsor)); #XXX year?


sub usage  {
  print STDERR @_, "\n" if @_;
  print <<"EOF";
Usage: changemon [options...] [change-uid...]
  -d            Debug
  -h            This help message
  -x            Fetch data file only
  -v            Verbose change list

  -r            Print a summary report
  -m            Continually monitor the change service
  -a  asgn-uid  Print details for specified assignment

  -O  org-uid   Organization UID [$OrgID]
  -U  userid    MSR username [$User]
  -P  password  MSR password
  -E  evt-uid   Event UID [$Event]
  -S  seg-uid   Segment UID [$Segment]
  -o  dir       Output directory [$OutDir]
  -p  printer   Print to specified printer
  -t  time      Start at specified timestamp
EOF
  exit !!@_;
}

sub parse_args () {
  my %opts;

  getopts('hdmrvxa:O:U:P:E:S:o:p:t:', \%opts) or usage("Invalid option!");
  usage()    if $opts{h};
  $DEBUG++   if $opts{d};
  $MONITOR++ if $opts{m};
  $REPORT++  if $opts{r};
  $VERBOSE++ if $opts{v};
  $GETONLY++ if $opts{x};
  $ASSIGN    = $opts{a} if exists $opts{a};

  $OrgID    = $opts{O} if defined $opts{O};
  $User     = $opts{U} if defined $opts{U};
  $Password = $opts{P} if defined $opts{P};
  $Event    = $opts{E} if defined $opts{E};
  $Segment  = $opts{S} if defined $opts{S};
  $OutDir   = $opts{o} if defined $opts{o};
  $Printer  = $opts{p} if defined $opts{p};
  $TSpath = "$OutDir/.timestamp";

  if    ($opts{t} =~ /^[0-9.]+$/) { $StartTS = $opts{t} }
  elsif (defined($opts{t}))       { $StartTS  = str2time($opts{t}, 'GMT') }

  my $pwpath = "$ENV{HOME}/.runoffs_pw";
  if (!$Password && -f $pwpath) {
    my $F = new IO::File($pwpath, O_RDONLY) or die "$pwpath: $!\n";
    while (<$F>) {
      chomp;
      my @F = split;
      $Password = $F[1] if $F[0] eq 'change';
    }
    $F->close;
  }
  $BaseURL = sprintf( 'https://%s/rest/events/%s', $Server, $Event);
  $ReqURL  = $BaseURL . sprintf('/feeds/timing.json?segments=%s', $Segment);
  $UA  = new LWP::UserAgent;
  $UA->show_progress($DEBUG);
}

sub ps_string ($) {
  my($x) = @_;
  $x =~ s/([()\\])/\\$1/g;
  $x;
}

sub format_other ($) {
  my($x) = @_;
  my($item, $value) = split(/:/, $x, 2);

  sprintf("(%s) (%s) Field newline",
    ps_string($item), ps_string($value))
}

sub make_form ($$$) {
  my($template, $out, $fields) = @_;

  $template =~ s/\@(\w+)\@/$$fields{$1}/g;
  my $F = new IO::File("$out.new", O_RDWR|O_CREAT|O_TRUNC, 0666);
  print $F $template;
  $F->close;
  rename("$out.new", $out);
}


sub official ($$) {
  my($change, $key) = @_;

  return undef unless $OfficialField{$key};
  $$change{_assign}{'official' . ucfirst($key)}
  // $$change{_assign}{$key}
}
sub oval ($$) {
  my($change, $key) = @_;
  $$change{old}{$key}
  // official($change, $key)
  // $$change{afterChange}{$key}
  // $$change{afterChange}{vehicle}{$key}
}
sub nval ($$;$) {
  my($change, $key, $official) = @_;

  if ($official) {
    $official = official($change, $key);
    return $official if defined $official;
  }

  $$change{new}{$key}
  // official($change, $key)
  // $$change{afterChange}{$key}
  // $$change{afterChange}{vehicle}{$key}
}

sub process_changes (@) {
  my(@changes) = @_;
  my($report, $summary, $dcount, $tcount);
  my $start = strftime("%b %d %H:%M", localtime(time));
  my $maxts = 0;

  foreach my $change (@changes) {
    my $uid = $$change{uid};
    my $path = "$OutDir/$uid.ps";
    my $ts = str2time($$change{ts}, 'GMT');
    my $stamp = strftime("%b %d %H:%M", localtime($ts));
    $maxts = $ts if $maxts < $ts;

    next if $uid =~ /[^0-9a-fA-F-]/;
    print "$stamp DUP $uid\n" if $MONITOR && -f $path;
    next if -f $path;
    $$change{_assign} = get_assign($$change{uidAssignment});

    $report = sprintf("%s %3s %-6s %s\n", #$uid,
      strftime('%Y-%m-%d %H:%M', localtime($ts)),
      oval($change, 'vehicleNumber'), oval($change, 'classShort'),
      oval($change, 'firstName') . ' ' . oval($change, 'lastName'),
    );
    $dcount++;

    my %fields = (
      logo_file => $LOGOFILE,
      logo_data => $LOGODATA,
      stamp     => $stamp,
      by        => $$change{changedBy}{firstName}
      . ' ' . $$change{changedBy}{lastName},
      old_car   => oval($change, 'vehicleNumber'),
      old_class => oval($change, 'classShort'),
      new_car   => nval($change, 'vehicleNumber'),
      new_class => nval($change, 'classShort'),
    );
    my $changed = 0;

    foreach my $item (@{$$change{affectedColumns}}) {
      my $old = $$change{old}{$item};
      my $new = $$change{new}{$item};
      my $off = official($change, $item) // $new;
      $old  =~ s/^\s*//; $old  =~ s/\s*$//;
      $new  =~ s/^\s*//; $new  =~ s/\s*$//;
      $off  =~ s/^\s*//; $off  =~ s/\s*$//;

      next if $IgnoreField{$item};
      my $key = $FieldMap{$item};

      if ($item eq 'attendeeStatus') {
        if ($new eq 'Cancelled' && $old ne 'Cancelled') {
          $fields{_status} = 'WITHDRAWN';
        } elsif ($old eq 'Cancelled' && $new ne 'Cancelled') {
          $fields{_status} = 'REINSTATED';
        } elsif ($old eq '' && $new ne '') {
          $fields{_status} = 'NEW ENTRY';
        } else {
          next;
        }
      }

      if (!$changed) {
        $summary .= $report;
        if ($MONITOR)    { print "$stamp $report" }
        elsif ($VERBOSE) { print $report }
      }
      if (length($old) + length($off) > 50) {
        $report = sprintf("   %-15s %s\n                => %s\n", $item, $old, $off);
      } else {
        $report = sprintf("   %-15s %s => %s\n", $item, $old, $off);
      }
      $report .= sprintf("                [ %s ]\n", $new) if $DEBUG && $OfficialField{$item};
      $summary .= $report;
      print $report if $VERBOSE;
      $tcount++;
      $changed++;

      next if $item eq 'attendeeStatus';
      if (defined($key)) {
        $fields{"old_$key"} = $old if defined $old;
        $fields{"new_$key"} = $off if defined $new;
      } else {
        $fields{'old_other'} ||= [];
        $fields{'new_other'} ||= [];
        push(@{$fields{'old_other'}}, "$item:$old");
        push(@{$fields{'new_other'}}, "$item:$off");
      }
    }
    print $report if $VERBOSE && $DEBUG && !$changed;
    next unless $changed;

    $summary .= "\n";
    print "\n" if $VERBOSE;

    # Clean up fields
    $fields{old_driver} = oval($change, 'firstName') . ' ' . oval($change, 'lastName');
    if (exists $fields{new_firstName} || exists $fields{new_lastName}) {
      $fields{new_driver} = nval($change, 'firstName', 1) . ' ' . nval($change, 'lastName', 1);
    }
    if (exists $fields{new_city} || exists $fields{new_region}) {
      $fields{old_home} = oval($change, 'city')     . ' ' . oval($change, 'region');
      $fields{new_home} = nval($change, 'city', 1)  . ' ' . nval($change, 'region', 1);
    }
    if (exists $fields{new_year} || exists $fields{new_make}
      || exists $fields{new_model} || exists $fields{new_engine}) {
      $fields{old_mme} = join(' ', map(oval($change, $_), qw(year make model engine)));
      $fields{new_mme} = join(' ', map(nval($change, $_, 1), qw(year make model engine)));
      $fields{old_mme} =~ s/^\s*//;  $fields{new_mme} =~ s/^\s*//;
      $fields{old_mme} =~ s/\s*$//;  $fields{new_mme} =~ s/\s*$//;
      $fields{old_mme} =~ s/\s+/ /g; $fields{new_mme} =~ s/\s+/ /g;
    }

    if (exists($fields{old_other})) {
      $fields{old_other} = join("\n", map(format_other($_), @{$fields{old_other}}));
    }
    if (exists($fields{old_other})) {
      $fields{new_other} = join("\n", map(format_other($_), @{$fields{new_other}}));
    }

    if ($DEBUG) {
      print STDERR map(sprintf("  %-12s %s\n", "$_:", $fields{$_}),
        grep(!/^logo_/, sort keys %fields));
    }

    if (!$REPORT) {
      make_form($Template, $path, \%fields);
      system ('lp', "-d$Printer", $path) if $Printer;
    }
  }
  $StartTS = $maxts if $maxts > 0;
  if ($maxts > 0 && !$REPORT) {
    my $TS = new IO::File("$TSpath.NEW", O_WRONLY|O_CREAT|O_TRUNC, 0666)
      or print STDERR "$TSpath.NEW: $!\n";
    if ($TS) {
      print $TS "$StartTS\n";
      $TS->close;
      rename("$TSpath.NEW", $TSpath)
        or print STDERR "$TSpath: $!\n";
    }
  }

  if ($MONITOR) {
    my $done = strftime("%b %d %H:%M", localtime(time));
    printf "%s -> %s %d changesets, %d changes\n", $done, $start, $dcount, $tcount;
  }
  if ($REPORT && $Printer && $summary) {
    # Print a summary report
    my $P = new IO::Pipe;
    $P->writer('lp', "-d$Printer") or die "lp: $!\n";
    print $P ' ' x 25, "*** CHANGE SUMMARY REPORT ***\n";
    print $P $summary;
    $P->close;
  }
}

sub get_assign ($) {
  my($auid) = @_;

  my $req = new HTTP::Request(GET =>
    sprintf('https://%s/scca/runoffs.cfm?id=%s', $Server, $auid));
  #$req->header('X-Organization-Id' => $OrgID);
  #$req->authorization_basic($User, $Password);

  my $res = $UA->request($req);
  die $res->status_line . "\n" unless $res->is_success;

  my $result = decode_json($res->content);
  print Dumper($result) if $DEBUG;
  return undef unless %$result;
  return $result;
}


sub get_one ($) {
  my($query) = @_;

  my $req = new HTTP::Request(GET => $ReqURL . $query);
  $req->header('X-Organization-Id' => $OrgID);
  $req->authorization_basic($User, $Password);

  my $res = $UA->request($req);
  die $res->status_line . "\n" unless $res->is_success;

  my $result = decode_json($res->content);
  if ($$result{success}) {
    return @{$$result{data}};
  } else {
    die join('', map("$_\n", 'MSR API request failed:', @{$$result{errors}}));
  }
}

sub get_data (@) {

  if (@_) {
    die "Can't fetch single changes yet\n";
  } else {
    die "No start time given!\n" unless $StartTS;
    my $t = int($StartTS);
    my $ms = ($StartTS - $t) * 1000;
    print STDERR "StartTS=$StartTS t=$t ms=$ms\n" if $DEBUG;

    my $since = sprintf('%s.%03d', strftime('%Y-%m-%d %H:%M:%S', gmtime($t)), $ms);
    my $lsince = sprintf('%s.%03d', strftime('%Y-%m-%d %H:%M:%S', localtime($t)), $ms);
    print "Fetching changes since $lsince\n";
    get_one("&since=$since");
  }
}

parse_args;

{
  my $F = new IO::File($LOGOPATH, O_RDONLY);
  if ($F) { $F->read($LOGODATA, ($F->stat())[7]) }
  else    { warn "$LOGOPATH: $!\n" }
}

if (!$StartTS) {
  if (-f $TSpath) {
    my $F = new IO::File($TSpath, O_RDONLY) or die "$TSpath: $!\n";
    chomp($StartTS = <$F>);
    $F->close;
  }
}

## Fetch the data file
if ($ASSIGN) {
  print Dumper(get_assign($ASSIGN));
} elsif ($GETONLY) {
  print Dumper(get_data(@ARGV));
} elsif (@ARGV) {
  process_changes(join('', <>));
} elsif ($MONITOR) {
  while (1) {
    process_changes(get_data());
    sleep(30);
  }
} else {
  process_changes(get_data());
}

__DATA__
%!PS-Adobe-3.0
%%Creator: changemon
%%DocumentNeededResources: font Helvetica-Bold
%%Pages: 1
%%BeginProlog
/inch {72 mul} def
/rj { 1 index stringwidth pop sub } def

/doFont { findfont exch scalefont setfont } def
%             size face       
/TitleFont  {   18 /Helvetica-Bold  doFont } def
/LabelFont  {   11 /Helvetica-Bold  doFont } def
/FieldFont  {   11 /Helvetica       doFont } def

/newline { /vpos vpos 0.34 inch sub def } def
/Field { 
  % Label Value
  FieldFont 2.20 inch vpos moveto show
  LabelFont 0.50 inch vpos moveto show
} def

/BeginEPSF { %def
  /b4_Inc_state save def                % Save state for cleanup
  /dict_count countdictstack def        % Count objects on dict stack
  /op_count count 1 sub def             % Count objects on operand stack
  userdict begin                        % Push userdict on dict stack
  /showpage { } def                     % Redefine showpage, { } = null proc
  0 setgray 0 setlinecap                % Prepare graphics state
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where                  % If level not equal to 1 then
  {pop languagelevel                    % set strokeadjust and
  1 ne                                  % overprint to their defaults.
    {false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF { %def
  count op_count sub {pop} repeat       % Clean up stacks
  countdictstack dict_count sub {end} repeat
  b4_Inc_state restore
} bind def
%%EndProlog
%%BeginSetup
%%IncludeResource: font Helvetica-Bold
%%EndSetup
%%Page: 1 1

% Runoffs Logo -- copy bbox from logo EPS header
/logo_bbox {14 14 344 250} def
/logo_scale 0.30 def

BeginEPSF
% logo_bbox
% 3 -1 roll sub logo_scale mul 10.75 inch exch sub
% 3 1 roll exch sub logo_scale mul 8.25 inch exch sub
% exch translate
.25 inch 10.75 inch
logo_bbox exch pop exch sub exch pop
logo_scale mul sub translate
logo_scale dup scale
logo_bbox pop pop neg exch neg exch translate
%%BeginDocument: @logo_file@
@logo_data@
%%EndDocument
EndEPSF

% Page Title
TitleFont
(OFFICIAL TIMING & SCORING CHANGE FORM)
dup stringwidth pop
8.5 inch exch sub 2 div
9.75 inch 
moveto show

(NOW)        dup stringwidth pop 1.9 inch exch sub 2 div 0.55 inch add 8.97 inch moveto show
(CHANGE TO)  dup stringwidth pop 1.9 inch exch sub 2 div 0.55 inch add 5.16 inch moveto show
(@_status@)  dup stringwidth pop 8.5 inch exch sub 2 div 5.16 inch moveto show

0.55 inch 8.89 inch 1.900 inch 0.375 inch rectstroke
0.55 inch 5.08 inch 1.900 inch 0.375 inch rectstroke

LabelFont (Date)              6.55 inch rj 9.10 inch moveto show  FieldFont (@stamp@)       8.00 inch rj 9.10 inch moveto show
LabelFont (Entered By)        6.55 inch rj 8.93 inch moveto show  FieldFont (@by@)          8.00 inch rj 8.93 inch moveto show
LabelFont (Car #)             0.50 inch 8.43 inch moveto show  FieldFont (@old_car@)     1.25 inch 8.43 inch moveto show
LabelFont (Class)             2.40 inch 8.43 inch moveto show  FieldFont (@old_class@)   3.20 inch 8.43 inch moveto show
LabelFont (Transponder)       4.40 inch 8.43 inch moveto show  FieldFont (@old_tx@)      5.85 inch 8.43 inch moveto show
LabelFont (Driver)            0.50 inch 8.09 inch moveto show  FieldFont (@old_driver@)  2.20 inch 8.09 inch moveto show
LabelFont (Hometown/State)    0.50 inch 7.75 inch moveto show  FieldFont (@old_home@)    2.20 inch 7.75 inch moveto show
LabelFont (Make/Model/Engine) 0.50 inch 7.41 inch moveto show  FieldFont (@old_mme@)     2.20 inch 7.41 inch moveto show
LabelFont (Sponsor)           0.50 inch 7.07 inch moveto show  FieldFont (@old_sponsor@) 2.20 inch 7.07 inch moveto show
/vpos 6.73 inch def @old_other@

LabelFont (Car #)             0.50 inch 4.62 inch moveto show  FieldFont (@new_car@)     1.25 inch 4.62 inch moveto show
LabelFont (Class)             2.40 inch 4.62 inch moveto show  FieldFont (@new_class@)   3.20 inch 4.62 inch moveto show
LabelFont (Transponder)       4.40 inch 4.62 inch moveto show  FieldFont (@new_tx@)      5.85 inch 4.62 inch moveto show
LabelFont (Driver)            0.50 inch 4.27 inch moveto show  FieldFont (@new_driver@)  2.20 inch 4.27 inch moveto show
LabelFont (Hometown/State)    0.50 inch 3.94 inch moveto show  FieldFont (@new_home@)    2.20 inch 3.94 inch moveto show
LabelFont (Make/Model/Engine) 0.50 inch 3.60 inch moveto show  FieldFont (@new_mme@)     2.20 inch 3.60 inch moveto show
LabelFont (Sponsor)           0.50 inch 3.26 inch moveto show  FieldFont (@new_sponsor@) 2.20 inch 3.26 inch moveto show
/vpos 2.92 inch def @new_other@

% LabelFont (Reason:)           1.25 inch 2.16 inch moveto show  FieldFont (@reason@)      2.25 inch 2.16 inch moveto show

LabelFont (Changed in:) 1.25 inch 1.47 inch moveto show
FieldFont

(Orbits A)       2.25 inch 1.47 inch moveto show
(Orbits B)       2.25 inch 1.24 inch moveto show
(Orbits C)       2.25 inch 1.01 inch moveto show
(Excel database) 2.25 inch 0.80 inch moveto show

4.8 inch 1.47 inch moveto 5.5 inch 1.47 inch lineto stroke
4.8 inch 1.24 inch moveto 5.5 inch 1.24 inch lineto stroke
4.8 inch 1.01 inch moveto 5.5 inch 1.01 inch lineto stroke
4.8 inch 0.80 inch moveto 5.5 inch 0.80 inch lineto stroke

showpage
%%Trailer
%%Pages: 1
